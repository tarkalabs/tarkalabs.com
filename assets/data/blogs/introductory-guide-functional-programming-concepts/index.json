{"hash":"7c195255eabdec51f623f46fa6fb0ccb05894676","data":{"blog":{"id":"0d5caec9f0391443b818054bdaa3bb3d","slug":"introductory-guide-functional-programming-concepts","content":"<p>Functional Programming is a vast ocean of thoughts, ideas &#x26; implementations. I have only begun to explore this exquisite programming paradigm. From an imperative world, I transitioned into a more organized process of Object-Oriented Design (OOD), and more recently, having experienced all the goodness and shortcomings of object-oriented thinking, I’ve stepped into the exotic sphere of “functional programming.”</p>\n<p>My goal in writing this article is to share some of the concepts pertinent to functional programming &#x26; how I altered my programming thought process to be more “functional.” If you’re looking for a more comprehensive guide to functional programming, I’d recommend reading one of many well-written &#x26; organized books out there like “Category Theory For Programmers” by Bartosz Milewski or “An Introduction to Functional Programming Through Lambda Calculus” by Greg Michaelson.</p>\n<h1 id=\"the-functional-approach\"><a href=\"#the-functional-approach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Functional Approach</h1>\n<p>Before we jump into the functional approach, I need to talk about the kind of functional programming I intend to discuss today. There is “<a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">functional programming</a>”, then there is “<a href=\"https://en.wikipedia.org/wiki/Purely_functional_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">purely functional programming</a>”.</p>\n<p>Languages like Elixir do not implement Purely Functional Programming. For example, on one of the <a href=\"https://hexdocs.pm/elixir/main/IO.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elixir Hexdocs pages</a>, there is a line that states :</p>\n<blockquote>\n<p>”Note that an IO stream has side effects, and every time you go over the stream you may get different results.”</p>\n</blockquote>\n<p>In purely functional programming languages like Haskell, you cannot have side effects. Purely functional programming forbids side effects, which means purely functional programs cannot affect any changes in the real world. But programs would be pretty much useless without side effects. To model side effects in a purely functional way, languages like Haskell use “Monads.” James Iry <a href=\"https://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">famously said</a>:</p>\n<blockquote>\n<p>A monad is just a monoid in the category of endofunctors, what’s the problem?</p>\n</blockquote>\n<p>I am not going to talk about Monads, Functors, or The Category Theory in this article though the concepts discussed here have their roots in category theory. Instead, I will take you through some functional programming ideas that can serve as a stepping stone into the world of functional programming and help mitigate any misunderstandings you may have had regarding these concepts.</p>\n<h1 id=\"1-composition-complexity--pipes\"><a href=\"#1-composition-complexity--pipes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Composition, Complexity &#x26; Pipes</h1>\n<img src=\"/blog/introductory-guide-functional-programming-concepts/1.webp\">\n<p>Composition is the essence of functional programming.</p>\n<p><em>The concept of composition in functional programming can minimally be defined as a combination of simple functions to build more complex functions.</em></p>\n<p>“Accidental Complexity” is a term used to describe the complexity that creeps into your code which is unintentional, unnecessary &#x26; incidental to the actual problem being solved. Composition in functional programming aims to keep the accidental complexity &#x26; even logical complexity at a minimum.</p>\n<p>To illustrate composition quite simply, Let’s look at this example (ruby).</p>\n<div class=\"gridsome-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\">y <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\nz <span class=\"token operator\">=</span> g<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\nz <span class=\"token operator\">==</span> g<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Functional programming languages offer several tools &#x26; techniques to make the composition work elegantly, Pipelines/Threads being an example.</p>\n<p>If you’ve worked with lisp-family languages, you’d know how easy it is to lose track of your progress in terms of the core problem solution. Even in other functional languages like Elixir, you’d run into this problem more often than you think.</p>\n<p>Solutions for this problem already exist within the “framework” of the functional programming paradigm. Functional programming languages implement these solutions in different ways. Here’s an example:</p>\n<p>Languages like Clojure <em>(->/->>)</em> &#x26; Elixir <em>(|>)</em> introduce thread/pipe operator to avoid this problem, and that’s nothing but a tool for composition. Let’s examine some code to understand how exactly this works. I’m going to be using Elixir to make it easily understandable to people unfamiliar with lisps too.</p>\n<p>This is a snippet of code from my <a href=\"https://adventofcode.com/2021/day/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advent Of Code 2021, Day 1</a> <a href=\"https://github.com/sreedevk/advent-of-code/blob/main/elixir/lib/twenty21/day1.ex\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">solution</a>.</p>\n<div class=\"gridsome-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n  <span class=\"token module class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>\n    <span class=\"token module class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">trim:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token module class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_integer</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, readability has already taken a significant hit. All we’re trying to do here is, read a file, split the contents of the file into an array of lines &#x26; parse each line into an integer.</p>\n<p>If you notice, the logic flows outward. The order of operations are not linear in the code.</p>\n<p>Now let’s try using Elixir’s pipe operator, which takes the value that the expression on the “left side” of the operator evaluates and passes it into the next function as the first parameter to the function.</p>\n<div class=\"gridsome-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token module class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|></span> <span class=\"token module class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">trim:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token module class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_integer</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That magically seems to provide a lot of structure to the code in addition to readability.</p>\n<p>You can almost see the data flow through those pipes.</p>\n<p>Clojure offers two function composition operators (thread macros as they are called in Clojure).</p>\n<p><em>thread-first (->)</em>, which passes the result of the previous function into the next function as the first parameter</p>\n<p><em>thread-last (->>)</em>, which passes the result of the previous function into the next function as the last parameter.</p>\n<p>Here’s an example from <a href=\"https://github.com/sreedevk/advent-of-code/blob/main/clojure/advent/src/advent/y2021/day1.clj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my advent of code 2021, day 1 solution</a>:</p>\n<div class=\"gridsome-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> alpha <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token operator\">-></span>> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t\t <span class=\"token punctuation\">(</span>partition <span class=\"token number\">2</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t <span class=\"token punctuation\">(</span>filter <span class=\"token comment\">#(apply &lt; %))</span>\n\t\t <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Even <a href=\"https://medium.com/tarkalabs-til/function-composition-in-ruby-69e37cdc9b0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby offers a “function/lambda composition operator” since version 2.6</a>.</p>\n<div class=\"gridsome-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\">x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nf <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> w <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\ng <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> w <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span>f <span class=\"token operator\">>></span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># or</span>\n<span class=\"token punctuation\">(</span>g <span class=\"token operator\">&lt;&lt;</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre></div>\n<p>There is a more mathematical explanation of the nature of composition in <a href=\"https://bartoszmilewski.com/2014/11/04/category-the-essence-of-composition/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bartosz Milewski’s Article on The Essence of composition</a>.</p>\n<h1 id=\"2-pure-functions--referential-transparency\"><a href=\"#2-pure-functions--referential-transparency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Pure Functions &#x26; Referential Transparency</h1>\n<img src=\"/blog/introductory-guide-functional-programming-concepts/2.webp\">\n<p>To classify a function as a pure function, it must adhere to certain rules in functional programming.</p>\n<ol>\n<li><em>The function should return identical return values for identical arguments.</em></li>\n<li><em>The function does not affect any changes outside the function’s scope. (i.e., it should not cause side effects).</em></li>\n</ol>\n<p>A side effect, in general, is any change that an impure function makes outside the scope of the function.</p>\n<p>For example, an addition function is a pure function. Here’s an example in Ruby.</p>\n<div class=\"gridsome-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\">add <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span>\nadd<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># => 3</span></code></pre></div>\n<p>For the above function/lambda, no matter what the condition, for a given set of numbers x &#x26; y, it’ll always return the sum of x &#x26; y. If your addition function gave different results each time you try to add 1 &#x26; 2, it wouldn’t be reliable, would it?</p>\n<p>Even though this seems doable for many cases, there are some cases where you cannot create a pure function. For example, a function that returns the current time or a function that returns a random number (without a seed or an implied seed parameter). Purely functional programming languages use <em>Monads</em> to solve this problem. But languages that are not purely functional, like Elixir, allow side effects in these special cases.</p>\n<p>While thinking functionally, we want our functions to keep the level of side effects to a minimum.</p>\n<p>“Referential transparency,” according to Wikipedia, is the property of an expression by which its corresponding value can replace it without affecting the program’s behavior. This requires the expression to be pure. A pure function can be treated as a subset of referential transparency by this definition.</p>\n<p>Another way I tend to look at the difference between referential transparency &#x26; purity of a function is,</p>\n<p>Purity is a restriction imposed on a function, and referential transparency is the effect of the function being pure.</p>\n<h1 id=\"3-immutability-assignment--binding\"><a href=\"#3-immutability-assignment--binding\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Immutability, Assignment &#x26; Binding</h1>\n<img src=\"/blog/introductory-guide-functional-programming-concepts/3.gif\">\n<p>Mutation, by definition, is a side-effect. So, as a result, most functional languages do not allow mutation. Coming from a different paradigm, this might seem strange or even impossible to work with, but the more you work with immutability, the more you’ll understand why this is a good thing.</p>\n<p>Variable assignments that model memory locations are not considered to be “functional” in nature. There is no concept of assignment in purely functional languages as the purpose of an assignment statement is to modify a variable. In functional languages, values are bound to labels. A neat way to understand this is with a little bit of good ol’ C. When you do something like <em>int x = 20</em>, you are doing two things, declaring the variable and then assigning a value to it, which is essentially mutating the variable.</p>\n<blockquote>\n<p>`Binding is used to create a new variable within the current context, while assignment can only change the value of a given variable within the narrowest bound scope.`</p>\n</blockquote>\n<p><a href=\"https://ashtonkemerling.com/posts/binding-vs-assignment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ashtonkemerling.com/posts/binding-vs-assignment/</a></p>\n<p>For Example, In Elixir this is perfectly valid code:</p>\n<div class=\"gridsome-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token function\">iex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">iex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> x</code></pre></div>\n<p>Another distinction we need to make is: rebinding is not the same as mutation. So, doing something like</p>\n<div class=\"gridsome-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token function\">iex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">iex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p>is not mutation. It is simply rebinding.</p>\n<h1 id=\"4-first-class-functions-higher-order-functions-currying--partial-application\"><a href=\"#4-first-class-functions-higher-order-functions-currying--partial-application\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. First Class Functions, Higher Order Functions, Currying &#x26; Partial Application</h1>\n<img src=\"/blog/introductory-guide-functional-programming-concepts/4.webp\">\n<p>That’s a lot of things to cover under a single sub-heading, but they’re all related &#x26; go together one after the other very well.</p>\n<p>A language is said to support first class functions if it treats functions like any other variable or, more formally, as <a href=\"https://en.wikipedia.org/wiki/First-class_citizen\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">first-class citizens</a>.</p>\n<p>It simply means that you should be able to pass in functions as parameters to other functions, return functions from other functions &#x26; store functions in data structures.</p>\n<p>In some languages like Ruby, functions are not first-class citizens but support things like `UnboundMethod` &#x26; `Method` objects (different from methods), lambdas, and procs. In the examples involving Ruby, I will use lambdas instead of functions as they’re closer to functions in functional programming languages.</p>\n<p>A higher order function is a function that takes at least one function as a parameter and returns a function. This is only possible in languages that support first class functions. For example, in Ruby,</p>\n<div class=\"gridsome-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">f <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In the above example, f is a function (lambda) that accepts a function x as a parameter and returns a function (lambda) that accepts an argument y and returns a value by invoking the function (lambda) x with y as a parameter. This is possible because lambdas in Ruby are closures. A closure is any function that closes over the environment in which it was defined.</p>\n<p>On a side note, if you think closures are impure because they are functions that depend on a variable/value outside their scope, they are not. You can think of the “influencing value(s)” (a.k.a capture(s)) as an “implied parameter”. Languages like c++ are more explicit when it comes to “captures.” The format for defining a lambda in c++ is <em>[ captures ] ( params ) { body }</em>. After the lambda’s declaration, changes to captures outside lambda do not affect changes within the lambda. This is not the case with Ruby, as it really doesn’t care about purity. Here’s an example:</p>\n<div class=\"gridsome-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">auto</span> w <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Currying is basically converting a function that takes multiple arguments into a series of functions that take a single argument each. Here’s an example of currying in Javascript.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<p>The above example illustrates the concept of currying. Instead of defining a single function that accepts parameters x &#x26; y and returns x + y, we define a function that accepts x and returns a function that accepts y and returns x + y. There are many theoretical and practical uses to currying.</p>\n<p>My purpose of introducing currying here is to explain the difference between currying &#x26; partial application when talking about partial application, as they are often confused as being the same thing.</p>\n<blockquote>\n<p>A partial application function can be defined as a function (pf) that takes in a function (af) and some arguments and returns a function (bf) which acts like the function (af) that was passed in but accepts fewer arguments; the other functions being “bound in.”</p>\n</blockquote>\n<p><a href=\"https://web.archive.org/web/20161023205431/http://www.uncarved.com/articles/not_currying\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://web.archive.org/web/20161023205431/http://www.uncarved.com/articles/not_currying</a></p>\n<p>Here’s an example of a partial application function in Ruby:</p>\n<div class=\"gridsome-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\">adder <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> args<span class=\"token punctuation\">.</span>sum <span class=\"token punctuation\">}</span>\npartial_applier <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pf_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  processed_args <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf_args<span class=\"token punctuation\">)</span>\n  partially_applied_function <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reduced_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    func<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>reduced_args<span class=\"token punctuation\">,</span> processed_args<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\npartially_applied_adder <span class=\"token operator\">=</span> partial_applier<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>adder<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\npartially_applied_adder<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> 100</span></code></pre></div>\n<p>Since the above example touches some “Rubyisms”, here’s a similar example in javascript:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">…args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> args<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partial_sum<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> partial_sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partial_applier</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> …fargs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> processed_fargs <span class=\"token operator\">=</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span>…fargs<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">…targs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>…<span class=\"token punctuation\">[</span>processed_fargs<span class=\"token punctuation\">,</span> …targs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\npartially_applied_adder <span class=\"token operator\">=</span> <span class=\"token function\">partial_applier</span><span class=\"token punctuation\">(</span>adder<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">partially_applied_adder</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Clojure has a partial application function called <em>partial</em>.</p>\n<div class=\"gridsome-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> hundred-times <span class=\"token punctuation\">(</span><span class=\"token keyword\">partial</span> * <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">;; => #'user/hundred-times</span></code></pre></div>\n<p>If you find the above examples hard to follow, <a href=\"https://web.archive.org/web/20161023205431/http://www.uncarved.com/articles/not_currying\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this article here</a>, explains this difference more in detail with more examples.</p>\n<p>Partial application can be useful in two contexts.</p>\n<ol>\n<li><em>It lets us fix a function’s arguments.</em></li>\n<li><em>It let’s create specific behavior from more generic functions.</em></li>\n</ol>\n<h1 id=\"5-recursion\"><a href=\"#5-recursion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Recursion</h1>\n<img src=\"/blog/introductory-guide-functional-programming-concepts/5.webp\">\n<p>Recursion does not need a special introduction as it is not specific to functional programming, though its more widely used in the functional paradigm. The reason for this heavy reliance on recursion is because, when immutability is a factor, recursion is a more expressive and powerful alternative to iteration.</p>\n<p>The dynamic programming style of breaking down problems into recursive sub-problems is very relevant to the functional programming paradigm.</p>\n<p>There is some really good content on <a href=\"https://www.youtube.com/watch?v=IJDJ0kBx2LM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">recursion on the internet</a>. I’d recommend going through some of them to learn more about it.</p>\n<h1 id=\"reimagining-solutions-in-functional-design\"><a href=\"#reimagining-solutions-in-functional-design\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reimagining Solutions in Functional Design</h1>\n<p>As a statement of conclusion, I’d like to introduce you to some programs written in a few different languages that calculate factorials of a number (n), some written in a functional way and others in an imperative way.</p>\n<h2 id=\"imperative--object-oriented\"><a href=\"#imperative--object-oriented\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Imperative / Object Oriented</h2>\n<div class=\"gridsome-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<center>C</center>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fac</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<center>Javascript</center>\n<div class=\"gridsome-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<center>Java</center>\n<h2 id=\"functional\"><a href=\"#functional\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Functional</h2>\n<div class=\"gridsome-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> factorial <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">reduce</span> * <span class=\"token punctuation\">(</span><span class=\"token keyword\">range</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">inc</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<center>Clojure</center>\n<div class=\"gridsome-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\">fac <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reduce<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<center>Ruby</center>\n<div class=\"gridsome-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">fac <span class=\"token operator\">=</span> <span class=\"token keyword\">fn</span> n <span class=\"token operator\">-></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token module class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span></code></pre></div>\n<center>Elixir</center>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fac</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> m <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<center>Javascript</center>\n<blockquote>\n<p>Hello Montreal! We’ll be at the <a href=\"https://startupfestival.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Startupfest ’22</a> all three days, so drop by and say hi. We’d love to see what you’re building, and early birds get a free (limited) design audit or tech consultation. DM us on Twitter (<a href=\"https://twitter.com/tarkalabs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@tarkalabs</a>) and let’s talk.</p>\n</blockquote>\n<h1 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h1>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Functional Programming</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Purely_functional_programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Purely Functional Programming</a></li>\n<li><a href=\"https://hexdocs.pm/elixir/main/IO.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IO Side-Effects in Elixir</a></li>\n<li><a href=\"https://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brief Incomplete &#x26; Mostly Wrong — James Iry</a></li>\n<li><a href=\"https://adventofcode.com/2021/day/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advent Of Code 2021 — Day 1</a></li>\n<li><a href=\"https://github.com/sreedevk/advent-of-code/blob/main/elixir/lib/twenty21/day1.ex\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advent Of Code 2021 — Day 1 Solution (Elixir)</a></li>\n<li><a href=\"https://github.com/sreedevk/advent-of-code/blob/main/clojure/advent/src/advent/y2021/day1.clj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advent Of Code 2021 — Day 1 Solution (Clojure)</a></li>\n<li><a href=\"https://bartoszmilewski.com/2014/11/04/category-the-essence-of-composition/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Essence of Composition</a></li>\n<li><a href=\"https://ashtonkemerling.com/posts/binding-vs-assignment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Binding vs Assignment</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/First-class_citizen\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">First Class Citizen</a></li>\n<li><a href=\"https://web.archive.org/web/20161023205431/http://www.uncarved.com/articles/not_currying\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Partial Application vs Currying</a></li>\n</ol>\n"},"blogs":{"edges":[{"node":{"tag":"web","title":"Building a Scalable Ingestion Pipeline with Rust","description":"Large industrial pipelines running down a steep, grassy hillside toward a river below","duration":"5 min read","thumbnail_alt":"","slug":"building-scalable-ingestion-pipeline-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"building-scalable-ingestion-pipeline-rust/pipeline-cover.webp"}},{"node":{"tag":"web","title":"Inserting Millions of Records in Java: Strategies and Benchmarks","description":"Inserting Millions of Records in Java: Strategies and Benchmarks","duration":"11 min read","thumbnail_alt":"Inserting Millions of Records in Java: Strategies and Benchmarks","slug":"inserting-millions-of-records-in-java","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"inserting-millions-of-records-in-java/image-2.webp"}},{"node":{"tag":"web","title":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 2)","description":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 2)","duration":"5 min read","thumbnail_alt":"","slug":"scaling-royalty-payout-p2","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"web","title":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 1)","description":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 1)","duration":"6 min read","thumbnail_alt":"","slug":"scaling-royalty-payout-p1","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"careers","title":"A Marketer's Guide to Surviving B2B IT Consulting","description":"","duration":"3 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"a-marketers-guide-to-surviving-b2b-it-consulting","tarkan":{"name":"Saudnya Kharade","role":"Brand Specialist","image":"saudnya.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"a-marketers-guide/b2b-blog.webp"}},{"node":{"tag":"web","title":"Blockchain as public ledger","description":"","duration":"5 min read","thumbnail_alt":"Blockchain FTW","slug":"smart-contracts-store-information","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"web","title":"Using Tarka Chat in your React/Vue apps","description":"Using Tarka Chat in your React/Vue apps","duration":"5 min read","thumbnail_alt":"Using Tarka Chat in your React/Vue apps","slug":"using-tarka-chat-in-your-react-vue-apps","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"using-tarka-chat-in-your-react-vue-apps/Photo-by-Volodymyr-Hryshchenko-on-Unsplash.webp"}},{"node":{"tag":"web","title":"Neovim as a java IDE","description":"Neovim as a java IDE","duration":"5 min read","thumbnail_alt":"Neovim as a java IDE","slug":"neovim-as-java-ide","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":""}},{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","description":"Navigating change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"AI","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","description":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Functional Programming for Humans — Foundations","description":"Functional Programming for Humans — Foundations","duration":"6 min read","thumbnail_alt":"Functional Programming for Humans — Foundations","slug":"functional-programming-for-humans-foundation","tarkan":{"name":"Sameer Kumar","role":"Technical Consultant","image":"sameer.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"functional-programming-for-humans-foundation/Functional-Programming-for-Humans—Foundations.webp"}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","description":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","description":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","description":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"AI","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","description":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"devops","title":"OpenText Magellan and AKS: An unofficial deployment guide","description":"OpenText Magellan and AKS: An unofficial deployment guide","duration":"11 min read","thumbnail_alt":"OpenText Magellan and AKS: An unofficial deployment guide","slug":"opentext-magellan-aks-unofficial-deployment-guide","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":""}},{"node":{"tag":"web","title":"Searching For The Perfect Fit: Our Move from Algolia to Typesense","description":"Our search for an open-source, cost-effective, scalable, and self-hosted solution led us to Typesense, an alternative to the very popular Algolia.","duration":"5 min read","thumbnail_alt":"Searching For The Perfect Fit: Our Move from Algolia to Typesense","slug":"searching-perfect-fit-move-from-algolia-to-typesense","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"searching-perfect-fit-move-from-algolia-to-typesense/searching-perfect-fit-move-from-algolia-to-typesense.webp"}},{"node":{"tag":"mobile","title":"5 essential tools and tips for every iOS developer","description":"5 essential tools and tips for every iOS developer","duration":"4 min read","thumbnail_alt":"5 essential tools and tips for every iOS developer","slug":"essential-tools-and-tips-for-every-ios-developer","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"ios-tips-and-tools/Recommended-tools-tips-for-iOS-developers.png"}},{"node":{"tag":"web","title":"Build your first Swift command-line tool with ArgumentParser","description":"Using Swift Package Manager (SPM) and swift-argument-parser, it's easy to create command-line tools in Swift. Here's how you can do it.","duration":"10 min read","thumbnail_alt":"Build your first Swift command-line tool with ArgumentParser","slug":"build-your-first-swift-command-line-tool-with-argumentparser","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"build-your-first-swift-command-line-tool-with-argumentparser/build-your-first-swift-command-line-tool-with-argumentparser.webp"}},{"node":{"tag":"mobile","title":"The ultimate VPN detection guide for iOS and Android","description":"The ultimate VPN detection guide for iOS and Android","duration":"3 min read","thumbnail_alt":"The ultimate VPN detection guide for iOS and Android","slug":"vpn-detection-guide-ios-android","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"the-ultimate-vpn-detection/the-ultimate-vpn.webp"}},{"node":{"tag":"mobile","title":"React Native vs. Flutter in 2023: A Comprehensive Comparison","description":"A detailed comparison of React Native vs. Flutter to help engineering managers make decisions on how, where, and when to use React or Flutter.","duration":"14 min read","thumbnail_alt":"React Native vs. Flutter in 2023: A Comprehensive Comparison","slug":"react-native-vs-flutter-2023-comparison","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"react-native-vs-flutter-2023-comparison/react-native-vs-flutter-2023-comparison.webp"}},{"node":{"tag":"mobile","title":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","description":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","duration":"3 min read","thumbnail_alt":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","slug":"kotlin-multiplatform-mobile","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"kotlin-multiplatform-mobile/kotlin-multiplatform-mobile.webp"}},{"node":{"tag":"web","title":"Reshaping data with PostgreSQL pivot tables","description":"Reshaping data with PostgreSQL pivot tables","duration":"4 min read","thumbnail_alt":"Reshaping data with PostgreSQL pivot tables","slug":"reshaping-data-postgresql-pivot-tables","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"reshaping-data-with-postgres/reshaping-data-with-postgreSQL.webp"}},{"node":{"tag":"web","title":"Effortlessly update YouTube videos on your Gridsome site","description":"How to build an auto-updating YouTube feed on your site using the YouTube API and Gridsome for Vue.js with step-by-step instructions and code samples.","duration":"10 min read","thumbnail_alt":"Effortlessly update YouTube videos on your Gridsome site","slug":"effortlessly-update-youtube-videos-on-your-gridsome-site","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"effortlessly-update-youtube-videos-on-your-gridsome-site/effortlessly-update-youtube-videos-on-your-gridsome-site.webp"}},{"node":{"tag":"devops","title":"The only in-depth AWS ECS monitoring solution you'll need","description":"This is a detailed blog on how to set up in-depth AWS ECS monitoring. The bundled alerts that come with ECS are inadequate. DevOps teams need more insight to be efficient.","duration":"6 min read","thumbnail_alt":"The only in-depth AWS ECS monitoring solution you'll need","slug":"aws-ecs-monitoring-solution","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"aws-ecs-monitoring-solution/cover.gif"}},{"node":{"tag":"devops","title":"Designing a centralized alert routing system using AWS Lambda","description":"Who wouldn't love a centralized monitoring and alerting system, right? Are you in the process of consolidating all your alerting systems into a single one?","duration":"4 min read","thumbnail_alt":"Designing a centralized alert routing system using AWS Lambda","slug":"centralized-alert-routing-system-aws-lambda","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"centralized-alert-routing-system-aws-lambda/cover.gif"}},{"node":{"tag":"web","title":"Rate limiting for distributed environments","description":"Different ways to architect distributed environments with rate limiting code snippets available","duration":"5 min read","thumbnail_alt":"Rate limiting for distributed environments","slug":"rate-limiting-for-distributed-environments","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"rate-limiting-for-distributed-environments/rate-limiting-for-distributed-environments.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","description":"Imagine you recently joined a new team, and after a couple of weeks, you were assigned a bug ticket. You look at the ticket and decide to see if this issue surfaced in the past and so do a search in the bug tracking tool.","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"mobile","title":"Java Life vs Kotlin Life","description":"Developers using Kotlin don't use it to its fullest potential because they use it just like Java. Kotlin is so much more powerful and concise. Here's how.","duration":"3 min read","thumbnail_alt":"Java Life vs Kotlin Life","slug":"java-life-vs-kotlin-life","tarkan":{"name":"Nandagopal Ravichandran","role":"Mobile Developer","image":"nanda.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"java-life-vs-kotlin-life/java-life-vs-kotlin-life.webp"}},{"node":{"tag":"consulting","title":"Building Serious Software","description":"Do you know what every software startup entrepreneur dreams of after they validate the market? Software that does not break with scale and is adaptable to change.","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","description":"As developers, it is necessary to understand how the code we write helps solve real-world problems. Often, it is easier to think about users while writing the application layer of code.","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"web","title":"Rust : Testing API Requests — HttpMock","description":"Rust : Testing API Requests — HttpMock","duration":"3 min read","thumbnail_alt":"Rust : Testing API Requests — HttpMock","slug":"rust-testing-api-requests-httpmock","tarkan":{"name":"Arun Kumar","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@arunkumar_33617"}},"coverImage":"rust-testing/Rust-testing.webp"}},{"node":{"tag":"web","title":"Considering a GraphQL switch? Here's why it is worth it.","description":"Considering a switch to GraphQL? From better data aggregation to schema stitching, here's why you should consider adopting GraphQL in your stack.","duration":"5 min read","thumbnail_alt":"Considering a GraphQL switch? Here's why it is worth it.","slug":"graphql-switch-worth-it","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":"graphql-switch-worth-it/graphql-switch-worth-it.webp"}},{"node":{"tag":"consulting","title":"What does a CTO do?","description":"There has been a lot of hand-wringing and discussions about what a CTO does on the interwebs. Does a CTO write code? Does a CTO's calendar look like it is on the maker's or the manager's schedule? Does a CTO sit in on interviews?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","description":"A manual for writers who work with cross-functional teams or roles.","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"mobile","title":"How to create shortcuts in your Android app","description":"Here's how you can implement static, dynamic and pinned shortcuts using our code snippets and guidelines.","duration":"4 min read","thumbnail_alt":"How to create shortcuts in your Android app","slug":"create-shortcuts-android-app","tarkan":{"name":"Raja Jawahar","role":"Mobile Developer","image":"raja.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"create-shortcuts-android-app/create-shortcuts-android-app.webp"}},{"node":{"tag":"mobile","title":"Launching a screen within an app using custom Siri voice commands","description":"Here's how you can configure NSUserActivity and IntentsUI in iOS to enable users to navigate to a specific screen inside an app using voice commands.","duration":"3 min read","thumbnail_alt":"Launching a screen within an app using custom Siri voice commands","slug":"launch-screen-siri-voice-commands","tarkan":{"name":"Naren Krishna","role":"iOS Developer","image":"naren.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"launch-screen-siri-voice-commands/launch-screen-siri-voice-commands.gif"}},{"node":{"tag":"web","title":"Testim 101: Automation Testing on Steroids","description":"Testim is an AI-based testing framework that helps you automate website testing. Here's a detailed review of its features, pros, and cons.","duration":"5 min read","thumbnail_alt":"Testim 101: Automation Testing on Steroids","slug":"testim-automation-testing-on-steroids","tarkan":{"name":"Sameer Kumar","role":"Technical Consultant","image":"sameer.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"testim-automation-testing-on-steroids/testim-automation-testing-on-steroids.webp"}},{"node":{"tag":"web","title":"How to setup SFTP in Golang Authentication Using Go","description":"How to setup SFTP in Golang Authentication Using Go","duration":"2 min read","thumbnail_alt":"How to setup SFTP in Golang Authentication Using Go","slug":"set-up-sftp-authentication-go","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"devops","title":"An introductory guide to functional programming concepts","description":"An introductory guide to functional programming concepts","duration":"10 min read","thumbnail_alt":"An introductory guide to functional programming concepts","slug":"introductory-guide-functional-programming-concepts","tarkan":{"name":"Sreedev Kodichath","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://sreedevk.medium.com/"}},"coverImage":"introductory-guide-functional-programming-concepts/introductory-guide-functional-programming-concepts.gif"}},{"node":{"tag":"design","title":"Trying out Material You. A tale of two background colors.","description":"Trying out Material You. A tale of two background colors.","duration":"7 min read","thumbnail_alt":"Trying out Material You. A tale of two background colors.","slug":"material-you-critique-light-mode-background-color-m3","tarkan":{"name":"Andy Reed","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@andy.reed89"}},"coverImage":"material-you-critique-light-mode-background-color-m3/material-you-critique-light-mode-background-color-m3.webp"}},{"node":{"tag":"web","title":"How to Build a Web Application using Rust — Part III","description":"How to Build a Web Application using Rust — Part III","duration":"2 min read","thumbnail_alt":"How to Build a Web Application using Rust — Part III","slug":"how-to-build-a-web-application-with-rust-part-3","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-3/how-to-build-a-web-application-with-rust-part-3.webp"}},{"node":{"tag":"devops","title":"Handling multiple environments with Helm","description":"Handling multiple environments with Helm","duration":"4 min read","thumbnail_alt":"Handling multiple environments with Helm","slug":"handling-multiple-environments-with-helm","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"handling-multiple-environments-with-helm/handling-multiple-environments-with-helm.webp"}},{"node":{"tag":"devops","title":"How to reduce your Node.js docker image size by 70%","description":"How to reduce your Node.js docker image size by 70%","duration":"4 min read","thumbnail_alt":"How to reduce your Node.js docker image size by 70%","slug":"reduce-nodejs-docker-image-size","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"reduce-nodejs-docker-image-size/how-to-reduce.gif"}},{"node":{"tag":"web","title":"How to build a Web Application with Rust: Part II","description":"How to build a Web Application with Rust: Part II","duration":"2 min read","thumbnail_alt":"How to build a Web Application with Rust: Part II","slug":"how-to-build-a-web-application-with-rust-part-2","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-2/how-to-build-a-web-application-with-rust-part-2.webp"}},{"node":{"tag":"","title":"How to build a Web Application with Rust: Part I","description":"How to build a Web Application with Rust: Part I","duration":"2 min read","thumbnail_alt":"How to build a Web Application with Rust: Part I","slug":"how-to-build-a-web-application-with-rust-part-1","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-1/how-to-build-a-web-application-with-rust-part-1.webp"}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","description":"How Tarka Labs approaches hiring.","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"devops","title":"Digital Audio 101: Playing Audio From A Microcontroller","description":"Digital Audio 101: Playing Audio From A Microcontroller","duration":"7 min read","thumbnail_alt":"Digital Audio 101: Playing Audio From A Microcontroller","slug":"digital-audio-101-playing-audio-from-a-microcontroller","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"digital-audio-101-playing-audio-from-a-microcontroller/digital-audio-101-playing-audio-from-a-microcontroller.gif"}},{"node":{"tag":"web","title":"What I learned refactoring a monolith into microservices","description":"Here are my learnings from 6 months of refactoring a monolithic MEAN stack web application running on docker inside a virtual machine.","duration":"4 min read","thumbnail_alt":"What I learned refactoring a monolith into microservices","slug":"refactoring-monolith-into-microservices","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"refactoring-monolith-into-microservices/refactoring-monolith-into-microservices.webp"}},{"node":{"tag":"consulting","title":"Don't Rewrite, Refactor: Why Brownfield Development Helps","description":"If you're finding it hard to build and ship new features, spending time to read and refactor the existing code can be better than rewriting it.","duration":"3 min read","thumbnail_alt":"Don't Rewrite, Refactor: Why Brownfield Development Helps","slug":"dont-rewrite-refactor-brownfield-development","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"dont-rewrite-refactor-brownfield-development/dont-rewrite-refactor-brownfield-development.webp"}},{"node":{"tag":"web","title":"Exploring Headless CMS","description":"Exploring Headless CMS","duration":"9 min read","thumbnail_alt":"Exploring Headless CMS","slug":"exploring-headless-cms","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"exploring-headless-cms/exploring-headless-cms.webp"}},{"node":{"tag":"blockchain","title":"My thoughts on Substrate","description":"My thoughts on Substrate","duration":"9 min read","thumbnail_alt":"My thoughts on Substrate","slug":"my-thoughts-on-substrate","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"my-thoughts-on-substrate/my-thoughts-on-substrate.webp"}},{"node":{"tag":"web","title":"Learnings from a failed product","description":"Learnings from a failed product","duration":"3 min read","thumbnail_alt":"Learnings from a failed product","slug":"learnings-from-a-failed-product","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"learning-from-a-failed-product/learning-from.webp"}},{"node":{"tag":"","title":"Filling images with mosaic colors using D3.js","description":"Filling images with mosaic colors using D3.js","duration":"3 min read","thumbnail_alt":"Filling images with mosaic colors using D3.js","slug":"filling-images-with-mosaic-colors-using-d3js","tarkan":{"name":"Alen Thomas","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@alenthomas9"}},"coverImage":"filling-images-with-mosaic-colors-using-d3js/filling-images-with-mosaic-colors-using-d3js.webp"}},{"node":{"tag":"web","title":"How To Learn Coding Through Live Streaming","description":"How To Learn Coding Through Live Streaming","duration":"5 min read","thumbnail_alt":"How To Learn Coding Through Live Streaming","slug":"learn-coding-through-live-streaming","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"learn-youtube-video/rahul-blog-1.webp"}},{"node":{"tag":"web","title":"Remote pairing in mac (with low latency)","description":"Remote pairing in mac (with low latency)","duration":"3 min read","thumbnail_alt":"Remote pairing in mac (with low latency)","slug":"remote-pairing-mac-low-latency","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Debounce in Swift","description":"All about debounce: 4 ways to achieve debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Service Mesh in Kubernetes — Pictorially","description":"Service Mesh in Kubernetes — Pictorially","duration":"5 min read","thumbnail_alt":"Service Mesh in Kubernetes — Pictorially","slug":"service-mesh-kubernetes-guide","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"service-mesh-in-kubernetes/service-mesh-2.webp"}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","description":"Guide to safely run customer javascript code in your node.js environment using vm2.","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Deploying your Rails application using dokku","description":"Deploying your Rails application using dokku","duration":"5 min read","thumbnail_alt":"Deploying your Rails application using dokku","slug":"how-to-deploy-rails-application-with-dokku","tarkan":{"name":"Vinoth","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@avinoth"}},"coverImage":"how-to-deploy-rails-application-with-dokku/header.webp"}},{"node":{"tag":"web","title":"Searching with MongoDB and Elastic Search","description":"Searching with MongoDB and Elastic Search","duration":"4 min read","thumbnail_alt":"Searching with MongoDB and Elastic Search","slug":"searching-with-mongodb-and-elastic-search","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"searching-with-mongodb-and-elastic-search/header.webp"}},{"node":{"tag":"web","title":"All You Need To Know About Comments in Ruby","description":"All You Need To Know About Comments in Ruby","duration":"5 min read","thumbnail_alt":"All You Need To Know About Comments in Ruby","slug":"all-you-need-to-know-about-comments-in-ruby","tarkan":{"name":"Sreedev Kodichath","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://sreedevk.medium.com/"}},"coverImage":"all-you-need-to-know-about-comments-in-ruby/header.webp"}},{"node":{"tag":"AI","title":"Person of Interest: How I built a Facial Recognition Machine Learning model.","description":"Person of Interest: How I built a Facial Recognition Machine Learning model.","duration":"5 min read","thumbnail_alt":"Person of Interest: How I built a Facial Recognition Machine Learning model.","slug":"building-a-facial-recognition-machine-learning-model","tarkan":{"name":"Rajiv Manivannan","role":"Developer","image":"rajiv.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"building-a-facial-recognition-machine-learning-model/1.webp"}},{"node":{"tag":"web","title":"Why we refuse fixed bid projects","description":"Why we refuse fixed bid projects","duration":"4 min read","thumbnail_alt":"Why we refuse fixed bid projects","slug":"why-we-refuse-fixed-bid-project","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-we-refuse-fixed-bid-project/why-we-refuse-fixed-big-projects.webp"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","description":"Understand kubernetes and its components with easily relatable pictorial representations.","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","description":"Look beyond react native and why flutter is exciting.","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"web","title":"PDF Comparison in Pure Ruby","description":"PDF Comparison in Pure Ruby","duration":"2 min read","thumbnail_alt":"PDF Comparison in Pure Ruby","slug":"pdf-comparison-pure-ruby","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"pdf-comparison-in-pure-ruby/pdf-comparison-in-pure-ruby.webp"}},{"node":{"tag":"careers","title":"How we hire engineers","description":"How Tarka Labs hires engineers. Published in the interest of transparency.","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","description":"Most developers spend a considerable amount of their time ssh'd into remote machines, however, few are aware of the power of ssh tunnels.","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","description":"The effectiveness of a positive mindset and the ability to self-assess.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}},{"node":{"tag":"web","title":"Event Delegation: Simple yet awesome!","description":"Event Delegation: Simple yet awesome!","duration":"2 min read","thumbnail_alt":"Event Delegation: Simple yet awesome!","slug":"event-delegation-simple-yet-awesome","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"event-delegation/event-delegation.webp"}},{"node":{"tag":"devops","title":"Automating cluster creation with Terraform on DigitalOcean","description":"Automating cluster creation with Terraform on DigitalOcean","duration":"4 min read","thumbnail_alt":"Automating cluster creation with Terraform on DigitalOcean","slug":"automating-cluster-creation-with-terraform-on-digitalocean","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":""}},{"node":{"tag":"AI","title":"Part 2- Creating a neural network using tensorflow to colorize grayscale images.","description":"Part 2- Creating a neural network using tensorflow to colorize grayscale images.\n","duration":"4 min read","thumbnail_alt":"","slug":"colorize-grayscale-images-pt-2","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":""}},{"node":{"tag":"AI","title":"Part I — Creating a neural network using tensorflow to colorize grayscale images.","description":"Part I — Creating a neural network using tensorflow to colorize grayscale images","duration":"4 min read","thumbnail_alt":"","slug":"colorize-grayscale-images-pt-1","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":""}}]}},"context":{}}