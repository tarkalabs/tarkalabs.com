{"hash":"ecdd0900c04ddda3dc9f04c04a35a79d771a4cb8","data":{"blog":{"id":"e808c5dc4df7019c9385e54c3a5851f0","slug":"inserting-millions-of-records-in-java","content":"<p><strong>Struggling with slow bulk inserts in Java?</strong> This guide benchmarks six strategies, from Hibernate to high-performance database-native methods, using datasets of up to 10 million records. Learn which approach is fastest, how to optimize inserts, and when it makes sense to ditch ORM for raw SQL speed.</p>\n<figure><img src=\"/blog/inserting-millions-of-records-in-java/image-2.png\" alt=\"chill guy\"><figcaption>chill guy</figcaption></figure>\n<h1 id=\"problem-statement\"><a href=\"#problem-statement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Problem Statement</h1>\n<p>Imagine you’re tasked with inserting millions of records into a PostgreSQL database. You’re limited to Java and multithreading, no Kafka, no RabbitMQ. How do you get the best performance?</p>\n<p>I recently faced this exact challenge and experimented with <strong>six different strategies</strong>:</p>\n<ol>\n<li><strong>Spring Data JPA <code class=\"language-inline-text\">saveAll()</code></strong></li>\n<li><strong>Hibernate batch insertion with <code class=\"language-inline-text\">EntityManager</code></strong></li>\n<li><strong>Multithreaded Hibernate with connection pooling</strong></li>\n<li><strong>Native SQL batch execution</strong></li>\n<li><strong>PL/SQL stored procedure calls</strong></li>\n<li><strong><code class=\"language-inline-text\">COPY</code> command using CSV input</strong></li>\n</ol>\n<p>This blog walks you through each approach, shares real benchmarks, and helps you pick the right one based on your workload and system limitations.</p>\n<h2 id=\"sample-data-format\"><a href=\"#sample-data-format\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sample Data Format</h2>\n<p>We’ll insert user permission records into the database, assuming they come from upstream systems in the following format:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    {\n        \"user_id\": \"user_1\",\n        \"entity_id\": \"entity_1cf156da-280d-4f07-aa16-3bdbfb1fff13\"\n    },\n    {\n        \"user_id\": \"user_2\",\n        \"entity_id\": \"entity_4d56783c-2add-49b2-ad53-080c6737e37d\"\n    }\n]</code></pre></div>\n<p>Each entry represents that a <code class=\"language-inline-text\">user_id</code> has permission to access a particular <code class=\"language-inline-text\">entity_id</code>.</p>\n<h1 id=\"project-setup\"><a href=\"#project-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Project Setup</h1>\n<p><strong>GitHub Repository:</strong> <a href=\"https://github.com/itzk7/batch_insertion_benchmark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">batch_insertion_benchmark</a><br>\nWe’ll use PostgreSQL via a Docker container:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run --name my-postgres \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e POSTGRES_DB=testdb \\\n  -p 5432:5432 \\\n  -v pgdata:/var/lib/postgresql/data \\\n  -d postgres:15</code></pre></div>\n<p>We’ll use Spring Boot with JPA (backed by Hibernate). Key dependencies:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &lt;parent>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-starter-parent&lt;/artifactId>\n        &lt;version>2.7.15&lt;/version> &lt;!-- Latest in 2.x -->\n    &lt;/parent>\n    ...\n    &lt;dependencies>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-data-jpa&lt;/artifactId>\n        &lt;/dependency>\n\n        &lt;dependency>\n            &lt;groupId>org.postgresql&lt;/groupId>\n            &lt;artifactId>postgresql&lt;/artifactId>\n            &lt;version>42.5.4&lt;/version>\n        &lt;/dependency>\n\n    &lt;/dependencies></code></pre></div>\n<p>Make sure to set your PostgreSQL connection details in <code class=\"language-inline-text\">src/main/resources/application.properties</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># === DATABASE CONFIGURATION ===\nspring.datasource.url=jdbc:postgresql://localhost:5432/testdb\nspring.datasource.username=postgres\nspring.datasource.password=postgres\nspring.datasource.driver-class-name=org.postgresql.Driver\n\n# === JPA / HIBERNATE SETTINGS ===\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.hibernate.ddl-auto=update</code></pre></div>\n<p>Adjust the <code class=\"language-inline-text\">username</code> and <code class=\"language-inline-text\">password</code> as per your local setup. This project uses Java 8 and is built with Maven</p>\n<h2 id=\"entity-definition\"><a href=\"#entity-definition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Entity Definition</h2>\n<p>We’ll define a composite unique constraint on <code class=\"language-inline-text\">user_id</code> and <code class=\"language-inline-text\">entity_id</code> to avoid duplicates, and include an auto-generated primary key for the table:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Entity\n@Table(\n  name = \"user_entity_permission\",\n  uniqueConstraints = @UniqueConstraint(columnNames = {\"user_id\", \"entity_id\"})\n)\npublic class UserEntityPermission {\n\n @Id\n @GeneratedValue(strategy = GenerationType.IDENTITY)\n private Long id;\n\n @Column(name = \"user_id\", nullable = false)\n private String userId;\n\n @Column(name = \"entity_id\", nullable = false)\n private String entityId;\n...\n}</code></pre></div>\n<h2 id=\"strategy-interface\"><a href=\"#strategy-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy Interface</h2>\n<p>We define an interface to plug in multiple strategies:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public interface UserEntityPermissionBulkInsertStrategy {\n void bulkInsert(List&lt;UserEntityPermission> permissions);\n String getStrategyName();\n}</code></pre></div>\n<p>We’ll use two methods: <code class=\"language-inline-text\">bulkInsert</code> will accept the list of permissions, and its job is to insert those permissions into the DB. The other method, <code class=\"language-inline-text\">getStrategyName</code>, will simply be used to get the name of the strategy.</p>\n<p>We’ll now walk through each of the six strategies,</p>\n<h2 id=\"strategy-1-spring-data-jpa-saveall\"><a href=\"#strategy-1-spring-data-jpa-saveall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy 1: <strong>Spring Data JPA <code class=\"language-inline-text\">saveAll()</code></strong></h2>\n<p>For many developers, <code class=\"language-inline-text\">repository.saveAll()</code> is the default approach for inserting multiple records. The implementation looks like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component(\"repositorySaveAllStrategy\")\n@Order(1)\npublic class RepositorySaveAllInsertStrategy implements UserEntityPermissionBulkInsertStrategy {\n\n private final UserEntityPermissionRepository repository;\n\n public RepositorySaveAllInsertStrategy(UserEntityPermissionRepository repository) {\n  this.repository = repository;\n }\n\n @Override\n public void bulkInsert(List&lt;UserEntityPermission> permissions) {\n  repository.saveAll(permissions);\n }\n\n...\n}</code></pre></div>\n<p>While you can configure the batch size in your application properties using ,</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jpa.properties.hibernate.jdbc.batch_size = 1000</code></pre></div>\n<p>this setting will be ineffective in this specific case. Due to the use of an auto-increment ID (<code class=\"language-inline-text\">GenerationType.IDENTITY</code>), Hibernate is forced to insert each row separately and wait for the generated key before proceeding. When dealing with 1 million records, this translates to executing one insert statement a million times, which significantly increases the overall processing duration.</p>\n<h2 id=\"strategy-2-multithreaded-hibernate-with-connection-pooling\"><a href=\"#strategy-2-multithreaded-hibernate-with-connection-pooling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy 2: <strong>Multithreaded Hibernate with connection pooling</strong></h2>\n<p>By using the <code class=\"language-inline-text\">EntityManager</code> explicitly, we can control when to insert records and when to clear memory. Hibernate works by keeping entities in the persistence context (first-level cache) after calling <code class=\"language-inline-text\">persist()</code>, but they remain in memory until a <code class=\"language-inline-text\">flush()</code> is triggered. The database insert operations are flushed either explicitly or automatically during transaction commit. Until then, entities are held in memory in the persistence context.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component(\"entityManagerStrategy\")\n@Order(2)\npublic class HibernateEntityManagerStrategy implements UserEntityPermissionBulkInsertStrategy {\n\n @PersistenceContext\n private EntityManager entityManager;\n\n @Override\n @Transactional\n public void bulkInsert(List&lt;UserEntityPermission> permissions) {\n  int batchSize = 1000;\n\n  for (int i = 0; i &lt; permissions.size(); i++) {\n   entityManager.persist(permissions.get(i));\n   if (i % batchSize == 0 &amp;&amp; i > 0) {\n    entityManager.flush();\n    entityManager.clear();\n   }\n  }\n\n  entityManager.flush();\n  entityManager.clear();\n }\n\n...\n}</code></pre></div>\n<p>You can fine-tune the batch size, but it still works best for a few thousand records.</p>\n<h2 id=\"strategy-3-hibernate-batch-insertion-with-concurrency\"><a href=\"#strategy-3-hibernate-batch-insertion-with-concurrency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy 3: <strong>Hibernate Batch Insertion With Concurrency</strong></h2>\n<p>To scale better, we can split the dataset across multiple threads. Each thread gets its own <code class=\"language-inline-text\">EntityManager</code> and handles batching independently in a separate transaction.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component(\"entityManagerWithConcurrencyStrategy\")\n@Order(3)\npublic class HibernateEntityManagerWithConcurrency implements UserEntityPermissionBulkInsertStrategy {\n\n private static final int THREADS = 5;\n private static final int BATCH_SIZE = 1000;\n\n @PersistenceUnit\n private EntityManagerFactory entityManagerFactory;\n\n private final PlatformTransactionManager transactionManager;\n\n public HibernateEntityManagerWithConcurrency(PlatformTransactionManager transactionManager) {\n  this.transactionManager = transactionManager;\n }\n\n @Override\n public void bulkInsert(List&lt;UserEntityPermission> permissions) {\n  int chunkSize = (int) Math.ceil((double) permissions.size() / THREADS);\n  ExecutorService executor = Executors.newFixedThreadPool(THREADS);\n\n  for (int i = 0; i &lt; THREADS; i++) {\n   int start = i \\* chunkSize;\n   int end = Math.min(start + chunkSize, permissions.size());\n   List&lt;UserEntityPermission> subList = permissions.subList(start, end);\n\n   executor.submit(() -> {\n    TransactionTemplate template = new TransactionTemplate(transactionManager);\n    template.execute(status -> {\n     EntityManager em = entityManagerFactory.createEntityManager();\n     try {\n      em.getTransaction().begin();\n      for (int j = 0; j &lt; subList.size(); j++) {\n       em.persist(subList.get(j));\n       if (j > 0 &amp;&amp; j % BATCH_SIZE == 0) {\n        em.flush();\n        em.clear();\n       }\n      }\n      em.flush();\n      em.clear();\n      em.getTransaction().commit();\n     } catch (Exception e) {\n      System.err.println(\"something went wrong \" + e);\n      e.printStackTrace();\n      if (em.getTransaction().isActive()) {\n       em.getTransaction().rollback();\n      }\n     } finally {\n      em.close();\n     }\n     return null;\n    });\n   });\n  }\n\n  executor.shutdown();\n\n...\n}</code></pre></div>\n<p>This method performed better than the first two strategies, but you need to set the connection pool settings properly; otherwise, you will face connection errors because many threads are trying to access the same DB connection. Make sure your connection pool supports parallel inserts by configuring these Hikari settings:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.datasource.hikari.maximum-pool-size=30\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.idle-timeout=10000\nspring.datasource.hikari.connection-timeout=30000\nspring.datasource.hikari.max-lifetime=1800000</code></pre></div>\n<h2 id=\"strategy-4-native-sql-batch-execution\"><a href=\"#strategy-4-native-sql-batch-execution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy 4: <strong>Native SQL batch execution</strong></h2>\n<p>An efficient alternative is to use native SQL with batch inserts, where all records are inserted in a single operation using <code class=\"language-inline-text\">JdbcTemplate</code>. It’s very easy to achieve this using the <code class=\"language-inline-text\">JdbcTemplate</code>'s <code class=\"language-inline-text\">batchUpdate</code> method.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component(\"nativeSqlStrategy\")\n@Order(4)\npublic class NativeSqlInsertStrategy implements UserEntityPermissionBulkInsertStrategy {\n\n private final JdbcTemplate jdbcTemplate;\n\n public NativeSqlInsertStrategy(JdbcTemplate jdbcTemplate) {\n  this.jdbcTemplate = jdbcTemplate;\n }\n\n @Override\n public void bulkInsert(List&lt;UserEntityPermission> permissions) {\n  String sql = \"INSERT INTO user_entity_permission (user_id, entity_id) VALUES (?, ?)\";\n\n  jdbcTemplate.batchUpdate(sql, permissions, permissions.size(), (ps, permission) -> {\n   ps.setString(1, permission.getUserId());\n   ps.setString(2, permission.getEntityId());\n  });\n }\n ...\n}</code></pre></div>\n<p>The <code class=\"language-inline-text\">batchUpdate()</code> method allows you to specify a batch size for the operations. In this implementation, for simplicity, we are setting the batch size equal to the total number of permissions (<code class=\"language-inline-text\">permissions.size()</code>). However, when testing with different large batch sizes (e.g., 1000, 10000, or 1000000), I did not observe a significant improvement in overall performance. The optimal batch size can often depend on your input data size, specific database and runtime environment, and it's recommended to tune it accordingly.</p>\n<h2 id=\"strategy-5-plsql-stored-procedure-calls\"><a href=\"#strategy-5-plsql-stored-procedure-calls\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy 5: <strong>PL/SQL stored procedure calls</strong></h2>\n<p>Similar to native SQL, we can also utilize SQL procedures. To achieve this, we need to create a procedure in the DB:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CREATE OR REPLACE PROCEDURE insert_user_entity_permission(user_id TEXT, entity_id TEXT)</code></pre></div>\n<p>In the implementation, we can use the same <code class=\"language-inline-text\">JdbcTemplate</code>'s <code class=\"language-inline-text\">batchUpdate</code> method:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component(\"plSqlStrategy\")\n@Order(5)\npublic class PlSqlInsertStrategy implements UserEntityPermissionBulkInsertStrategy {\n\n private final JdbcTemplate jdbcTemplate;\n\n public PlSqlInsertStrategy(JdbcTemplate jdbcTemplate) {\n  this.jdbcTemplate = jdbcTemplate;\n }\n\n @Override\n public void bulkInsert(List&lt;UserEntityPermission> permissions) {\n  String sql = \"CALL insert_user_entity_permission(?, ?)\";\n\n  jdbcTemplate.batchUpdate(sql, permissions, permissions.size(), (ps, permission) -> {\n   ps.setString(1, permission.getUserId());\n   ps.setString(2, permission.getEntityId());\n  });\n }\n...\n}</code></pre></div>\n<h2 id=\"strategy-6-copy-command-using-csv-input\"><a href=\"#strategy-6-copy-command-using-csv-input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strategy 6: <strong><code class=\"language-inline-text\">COPY</code> command using CSV input</strong></h2>\n<p>In this method, We’ll create a CSV file for the permissions and use the <code class=\"language-inline-text\">COPY</code> command to upload all the data. Once the data is uploaded, We’ll clean up the CSV</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component(\"csv-upload\")\n@Order(6)\npublic class CsvUploadInsertStrategy implements UserEntityPermissionBulkInsertStrategy {\n\n private final DataSource dataSource;\n\n public CsvUploadInsertStrategy(DataSource dataSource) {\n  this.dataSource = dataSource;\n }\n\n @Override\n public void bulkInsert(List&lt;UserEntityPermission> permissions) {\n  File tempFile = null;\n  try {\n   // Step 1: Create temp CSV file\n   tempFile = File.createTempFile(\"permissions-\", \".csv\");\n   try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {\n    for (UserEntityPermission permission : permissions) {\n     writer.write(permission.getUserId() + \",\" + permission.getEntityId());\n     writer.newLine();\n    }\n   }\n\n   // Step 2: Perform COPY operation\n   try (Connection conn = dataSource.getConnection();\n     FileReader reader = new FileReader(tempFile)) {\n\n    CopyManager copyManager = new CopyManager((BaseConnection) conn.unwrap(BaseConnection.class));\n    copyManager.copyIn(\"COPY user_entity_permission (user_id, entity_id) FROM STDIN WITH (FORMAT csv)\", reader);\n   }\n\n  } catch (Exception e) {\n   throw new RuntimeException(\"Failed to perform CSV upload\", e);\n  } finally {\n   // Step 3: Cleanup the CSV file\n  }\n }\n\n ...\n}</code></pre></div>\n<p>Bulk insertions using CSV are supported by most databases in some form, and with <strong>PostgreSQL</strong>, the <code class=\"language-inline-text\">CopyManager</code> makes this process exceptionally efficient.</p>\n<h1 id=\"execution\"><a href=\"#execution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Execution</h1>\n<p>To generate 1 million permissions, Here’s a utility method to quickly generate test data:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static List&lt;UserEntityPermission> generatePermissions(int count) {\n List&lt;UserEntityPermission> permissions = Collections.synchronizedList(new ArrayList&lt;>(count));\n\n IntStream.range(0, count).parallel().forEach(i -> {\n  String userId = \"user-\" + (i % count);\n  String entityId = \"entity-\" + UUID.randomUUID();\n  permissions.add(new UserEntityPermission(userId, entityId));\n });\n\n ...\n return permissions;\n}</code></pre></div>\n<p>For a given count, it will simply generate the list of permissions.</p>\n<p>To run all the strategies, we can simply get all the beans implementing the interface because we have already defined all the strategy implementations as <code class=\"language-inline-text\">@Component</code> classes and also defined the <code class=\"language-inline-text\">@Order</code> for each strategy.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Component\npublic class BulkInsertBenchmarkRunner {\n\n    private final List&lt;UserEntityPermissionBulkInsertStrategy> strategies;\n    private final JdbcTemplate jdbcTemplate;\n\n    public BulkInsertBenchmarkRunner(\n            List&lt;UserEntityPermissionBulkInsertStrategy> strategies,\n            JdbcTemplate jdbcTemplate) {\n        this.strategies = strategies;\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void runBenchmark(int numberOfRecords) {\n        for (UserEntityPermissionBulkInsertStrategy strategy : strategies) {\n            List&lt;UserEntityPermission> permissions = PermissionDataGenerator.generatePermissions(numberOfRecords);\n\n            System.out.println(\"Running strategy: \" + strategy.getStrategyName());\n\n            clearTable();\n\n            long startTime = System.currentTimeMillis();\n            strategy.bulkInsert(permissions);\n            long endTime = System.currentTimeMillis();\n\n            long duration = endTime - startTime;\n\n            long count = countRecords();\n\n            System.out.println(\"Inserted: \" + count + \" records using \" +\n                    strategy.getStrategyName() + \" in \" + duration + \" ms\");\n            System.out.println(\"--------------------------------------------------\");\n        }\n    }\n\n    private void clearTable() {\n        jdbcTemplate.execute(\"TRUNCATE TABLE user_entity_permission\");\n    }\n\n    private long countRecords() {\n        return jdbcTemplate.queryForObject(\"SELECT COUNT(\\*) FROM user_entity_permission\", Long.class);\n    }\n}</code></pre></div>\n<p>In the <code class=\"language-inline-text\">runBenchmark</code> method, we first clear all records from the permission table before executing each strategy. After each run, we print the number of inserted rows and the time taken, which help evaluate each strategy's performance.</p>\n<p>So, in the main method of the application, we can simply call the runner like this to execute all the strategies:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@SpringBootApplication\npublic class Main {\n\n public static void main(String\\[\\] args) {\n  ApplicationContext context = SpringApplication.run(Main.class, args);\n  BulkInsertBenchmarkRunner runner = context.getBean(BulkInsertBenchmarkRunner.class);\n  runner.runBenchmark(1_000_000);\n }\n}</code></pre></div>\n<p>This will trigger the benchmark for 1 million records.</p>\n<h1 id=\"benchmark-results\"><a href=\"#benchmark-results\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Benchmark Results</h1>\n<p>To understand the performance characteristics of each bulk insertion strategy across different scales, we conducted benchmarks using varying numbers of records. The tests were performed in a controlled environment. (<em>I ran the benchmarks on a Postgres Docker container using a 12-core MacBook with an M2 chip. I didn’t apply any special JVM tuning; the Spring Boot application was run with its default settings, using</em> <strong><em>Java version 8</em></strong>)</p>\n<p>The primary metric measured was the total time taken to insert all records using each strategy.</p>\n<p>Let’s examine the performance trends starting with smaller data volumes.</p>\n<h2 id=\"performance-across-varying-data-sizes-1000-to-100000-records\"><a href=\"#performance-across-varying-data-sizes-1000-to-100000-records\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance Across Varying Data Sizes (1000 to 100000 Records)</h2>\n<p>This graph illustrates how the different strategies perform as the data size increases from a few hundred up to one hundred thousand records.</p>\n<p>Graph is based on log scale</p>\n<p>As you can see, for smaller data sizes (e.g., 1000 or 10000 records), the performance difference between the methods is less pronounced. Standard Hibernate approaches (<code class=\"language-inline-text\">repository-saveAll</code>, <code class=\"language-inline-text\">entity-manager</code>, and even <code class=\"language-inline-text\">entity-manager-concurrent</code>) show relatively acceptable performance within the \"few thousand\" range. This suggests that if you typically insert only a few thousand records at a time, the convenience of using standard JPA or Hibernate batching might be sufficient.</p>\n<p>However, the graph clearly shows that as the data size grows towards 10,000 and especially 100,000 records, the performance curves diverge significantly. The time taken by the standard Hibernate methods begins to increase much more steeply compared to the native database approaches.</p>\n<h2 id=\"performance-for-1-million-1m-records\"><a href=\"#performance-for-1-million-1m-records\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance for 1 Million (1M) Records</h2>\n<p>Scaling up significantly, let’s look at the performance when inserting a substantial volume: 1 million records.</p>\n<figure><img src=\"/blog/inserting-millions-of-records-in-java/image-1.png\" alt=\"Benchmark for 1M records\"><figcaption>Benchmark for 1M records</figcaption></figure>\n<p>At the 1 million record mark, the limitations of standard Hibernate batching become much more apparent. The <code class=\"language-inline-text\">repository-saveAll</code> and single-threaded <code class=\"language-inline-text\">entity-manager</code> strategies take a considerably longer time. While the <strong>concurrent Hibernate approach</strong> (<code class=\"language-inline-text\">entity-manager-concurrent</code>) offers a notable improvement over its single-threaded counterparts, it is still orders of magnitude slower than methods leveraging native database capabilities.</p>\n<p>The <strong>Native SQL</strong> and <strong>PL/SQL</strong> strategies demonstrate their efficiency for large datasets here, completing the insertions in a fraction of the time taken by the Hibernate entity-based methods.</p>\n<h2 id=\"performance-for-10-million-10m-records\"><a href=\"#performance-for-10-million-10m-records\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance for 10 Million (10M) Records</h2>\n<p>Pushing the boundaries further, we benchmarked the strategies with a massive 10 million records.</p>\n<figure><img src=\"/blog/inserting-millions-of-records-in-java/image.png\" alt=\"Benchmark for 10 Million records\"><figcaption>Benchmark for 10 Million records</figcaption></figure>\n<p>This scale truly highlights the importance of choosing an optimized strategy for very large bulk operations. The performance gap between the methods becomes even wider. While the exact numbers will vary based on hardware and database configuration, the relative performance ranking remains consistent.</p>\n<p>The <strong>CSV COPY method</strong> stands out as the clear winner for inserting 10 million records, completing the operation far faster than any other strategy. This performance is due to it bypassing much of the overhead associated with JDBC or ORM frameworks and using the database’s highly optimized bulk loading API.</p>\n<p><strong>Native SQL</strong> and <strong>PL/SQL</strong> remain strong contenders at this scale and are highly recommended alternatives when the CSV method is not applicable or preferred. Standard Hibernate entity based insertions become impractical for this volume of data, taking an excessively long time.</p>\n<h2 id=\"should-we-ditch-hibernate-for-bulk-insertions\"><a href=\"#should-we-ditch-hibernate-for-bulk-insertions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Should We Ditch Hibernate for Bulk Insertions?</h2>\n<p>Hibernate is a great default, but when you’re dealing with serious data volumes, it’s time to look elsewhere. For performance critical batch inserts, native SQL and bulk loaders are your best bet. For truly large-scale bulk insertions (hundreds of thousands to millions of records or more), relying solely on standard Hibernate entity persistence (<code class=\"language-inline-text\">saveAll</code>, <code class=\"language-inline-text\">persist</code> with flushing) is not advisable due to significant performance bottlenecks.</p>\n<p>However, this doesn’t mean you should abandon Hibernate entirely. For typical application operations involving inserting a few dozen or even a few thousand records within a standard transaction, the convenience and features of Hibernate are invaluable and the performance is usually sufficient.</p>\n<p>The key takeaway is to select the strategy appropriate for the data volume:</p>\n<ul>\n<li>Use standard <strong>Hibernate/JPA</strong> for routine transactions and smaller batch inserts.</li>\n<li>Employ <strong>Native SQL</strong> or <strong>PL/SQL</strong> for significant bulk insertion tasks when you need good performance and database specific features are acceptable.</li>\n<li>Choose <strong>Database Native Bulk Loaders (like CSV COPY)</strong> when dealing with massive datasets and the target database supports an efficient direct loading mechanism, this is often the fastest possible method.</li>\n</ul>\n<p>Understanding these performance differences allows you to make informed decisions and optimize your data insertion processes for various use cases.</p>\n<h1 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h1>\n<p>This exploration compared various Java based strategies for high-volume bulk insertions. Our benchmarks clearly showed the <strong>CSV COPY method</strong> is the fastest for millions of records, leveraging native database bulk loading, though its availability varies by database.</p>\n<p>When CSV isn’t feasible, <strong>Native SQL</strong> or <strong>PL/SQL</strong> via <code class=\"language-inline-text\">JdbcTemplate</code> are the next most performant alternatives, proving significantly faster than standard JPA persistence for large volumes. Standard JPA methods like <code class=\"language-inline-text\">Repository.saveAll()</code> are convenient for smaller batches but struggle significantly with millions of entries due to ORM overhead.</p>\n<p>In summary, for large scale data insertion in Java:</p>\n<ul>\n<li><strong>Prioritize Database Native Bulk Loaders (like COPY)</strong> if supported.</li>\n<li>Consider <strong>Native SQL or PL/SQL</strong> as highly effective alternatives.</li>\n<li>Use <strong>Standard JPA</strong> only for smaller batch inserts.</li>\n</ul>\n<p>Choosing the right strategy depends on your data volume, performance needs, and database capabilities.</p>\n<p>The full implementation details can be found in this <a href=\"https://github.com/itzk7/batch_insertion_benchmark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repository</a>.</p>\n<p>Thanks for reading!</p>\n"},"blogs":{"edges":[{"node":{"tag":"web","title":"Inserting Millions of Records in Java: Strategies and Benchmarks","description":"Inserting Millions of Records in Java: Strategies and Benchmarks","duration":"11 min read","thumbnail_alt":"Inserting Millions of Records in Java: Strategies and Benchmarks","slug":"inserting-millions-of-records-in-java","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"inserting-millions-of-records-in-java/image-2.png"}},{"node":{"tag":"web","title":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 2)","description":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 2)","duration":"5 min read","thumbnail_alt":"","slug":"scaling-royalty-payout-p2","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"web","title":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 1)","description":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 1)","duration":"6 min read","thumbnail_alt":"","slug":"scaling-royalty-payout-p1","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"careers","title":"A Marketer's Guide to Surviving B2B IT Consulting","description":"","duration":"3 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"a-marketers-guide-to-surviving-b2b-it-consulting","tarkan":{"name":"Saudnya Kharade","role":"Brand Specialist","image":"saudnya.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"a-marketers-guide/b2b-blog.webp"}},{"node":{"tag":"web","title":"Blockchain as public ledger","description":"","duration":"5 min read","thumbnail_alt":"Blockchain FTW","slug":"smart-contracts-store-information","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"web","title":"Using Tarka Chat in your React/Vue apps","description":"Using Tarka Chat in your React/Vue apps","duration":"5 min read","thumbnail_alt":"Using Tarka Chat in your React/Vue apps","slug":"using-tarka-chat-in-your-react-vue-apps","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"using-tarka-chat-in-your-react-vue-apps/Photo-by-Volodymyr-Hryshchenko-on-Unsplash.webp"}},{"node":{"tag":"web","title":"Neovim as a java IDE","description":"Neovim as a java IDE","duration":"5 min read","thumbnail_alt":"Neovim as a java IDE","slug":"neovim-as-java-ide","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":""}},{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","description":"Navigating change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"AI","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","description":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Functional Programming for Humans — Foundations","description":"Functional Programming for Humans — Foundations","duration":"6 min read","thumbnail_alt":"Functional Programming for Humans — Foundations","slug":"functional-programming-for-humans-foundation","tarkan":{"name":"Sameer Kumar","role":"Technical Consultant","image":"sameer.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"functional-programming-for-humans-foundation/Functional-Programming-for-Humans—Foundations.webp"}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","description":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","description":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","description":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"AI","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","description":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"devops","title":"OpenText Magellan and AKS: An unofficial deployment guide","description":"OpenText Magellan and AKS: An unofficial deployment guide","duration":"11 min read","thumbnail_alt":"OpenText Magellan and AKS: An unofficial deployment guide","slug":"opentext-magellan-aks-unofficial-deployment-guide","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":""}},{"node":{"tag":"web","title":"Searching For The Perfect Fit: Our Move from Algolia to Typesense","description":"Our search for an open-source, cost-effective, scalable, and self-hosted solution led us to Typesense, an alternative to the very popular Algolia.","duration":"5 min read","thumbnail_alt":"Searching For The Perfect Fit: Our Move from Algolia to Typesense","slug":"searching-perfect-fit-move-from-algolia-to-typesense","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"searching-perfect-fit-move-from-algolia-to-typesense/searching-perfect-fit-move-from-algolia-to-typesense.webp"}},{"node":{"tag":"mobile","title":"5 essential tools and tips for every iOS developer","description":"5 essential tools and tips for every iOS developer","duration":"4 min read","thumbnail_alt":"5 essential tools and tips for every iOS developer","slug":"essential-tools-and-tips-for-every-ios-developer","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"ios-tips-and-tools/Recommended-tools-tips-for-iOS-developers.png"}},{"node":{"tag":"web","title":"Build your first Swift command-line tool with ArgumentParser","description":"Using Swift Package Manager (SPM) and swift-argument-parser, it's easy to create command-line tools in Swift. Here's how you can do it.","duration":"10 min read","thumbnail_alt":"Build your first Swift command-line tool with ArgumentParser","slug":"build-your-first-swift-command-line-tool-with-argumentparser","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"build-your-first-swift-command-line-tool-with-argumentparser/build-your-first-swift-command-line-tool-with-argumentparser.webp"}},{"node":{"tag":"mobile","title":"The ultimate VPN detection guide for iOS and Android","description":"The ultimate VPN detection guide for iOS and Android","duration":"3 min read","thumbnail_alt":"The ultimate VPN detection guide for iOS and Android","slug":"vpn-detection-guide-ios-android","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"the-ultimate-vpn-detection/the-ultimate-vpn.webp"}},{"node":{"tag":"mobile","title":"React Native vs. Flutter in 2023: A Comprehensive Comparison","description":"A detailed comparison of React Native vs. Flutter to help engineering managers make decisions on how, where, and when to use React or Flutter.","duration":"14 min read","thumbnail_alt":"React Native vs. Flutter in 2023: A Comprehensive Comparison","slug":"react-native-vs-flutter-2023-comparison","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"react-native-vs-flutter-2023-comparison/react-native-vs-flutter-2023-comparison.webp"}},{"node":{"tag":"mobile","title":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","description":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","duration":"3 min read","thumbnail_alt":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","slug":"kotlin-multiplatform-mobile","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"kotlin-multiplatform-mobile/kotlin-multiplatform-mobile.webp"}},{"node":{"tag":"web","title":"Reshaping data with PostgreSQL pivot tables","description":"Reshaping data with PostgreSQL pivot tables","duration":"4 min read","thumbnail_alt":"Reshaping data with PostgreSQL pivot tables","slug":"reshaping-data-postgresql-pivot-tables","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"reshaping-data-with-postgres/reshaping-data-with-postgreSQL.webp"}},{"node":{"tag":"web","title":"Effortlessly update YouTube videos on your Gridsome site","description":"How to build an auto-updating YouTube feed on your site using the YouTube API and Gridsome for Vue.js with step-by-step instructions and code samples.","duration":"10 min read","thumbnail_alt":"Effortlessly update YouTube videos on your Gridsome site","slug":"effortlessly-update-youtube-videos-on-your-gridsome-site","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"effortlessly-update-youtube-videos-on-your-gridsome-site/effortlessly-update-youtube-videos-on-your-gridsome-site.webp"}},{"node":{"tag":"devops","title":"The only in-depth AWS ECS monitoring solution you'll need","description":"This is a detailed blog on how to set up in-depth AWS ECS monitoring. The bundled alerts that come with ECS are inadequate. DevOps teams need more insight to be efficient.","duration":"6 min read","thumbnail_alt":"The only in-depth AWS ECS monitoring solution you'll need","slug":"aws-ecs-monitoring-solution","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"aws-ecs-monitoring-solution/cover.gif"}},{"node":{"tag":"devops","title":"Designing a centralized alert routing system using AWS Lambda","description":"Who wouldn't love a centralized monitoring and alerting system, right? Are you in the process of consolidating all your alerting systems into a single one?","duration":"4 min read","thumbnail_alt":"Designing a centralized alert routing system using AWS Lambda","slug":"centralized-alert-routing-system-aws-lambda","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"centralized-alert-routing-system-aws-lambda/cover.gif"}},{"node":{"tag":"web","title":"Rate limiting for distributed environments","description":"Different ways to architect distributed environments with rate limiting code snippets available","duration":"5 min read","thumbnail_alt":"Rate limiting for distributed environments","slug":"rate-limiting-for-distributed-environments","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"rate-limiting-for-distributed-environments/rate-limiting-for-distributed-environments.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","description":"Imagine you recently joined a new team, and after a couple of weeks, you were assigned a bug ticket. You look at the ticket and decide to see if this issue surfaced in the past and so do a search in the bug tracking tool.","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"mobile","title":"Java Life vs Kotlin Life","description":"Developers using Kotlin don't use it to its fullest potential because they use it just like Java. Kotlin is so much more powerful and concise. Here's how.","duration":"3 min read","thumbnail_alt":"Java Life vs Kotlin Life","slug":"java-life-vs-kotlin-life","tarkan":{"name":"Nandagopal Ravichandran","role":"Mobile Developer","image":"nanda.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"java-life-vs-kotlin-life/java-life-vs-kotlin-life.webp"}},{"node":{"tag":"consulting","title":"Building Serious Software","description":"Do you know what every software startup entrepreneur dreams of after they validate the market? Software that does not break with scale and is adaptable to change.","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","description":"As developers, it is necessary to understand how the code we write helps solve real-world problems. Often, it is easier to think about users while writing the application layer of code.","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"web","title":"Rust : Testing API Requests — HttpMock","description":"Rust : Testing API Requests — HttpMock","duration":"3 min read","thumbnail_alt":"Rust : Testing API Requests — HttpMock","slug":"rust-testing-api-requests-httpmock","tarkan":{"name":"Arun Kumar","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@arunkumar_33617"}},"coverImage":"rust-testing/Rust-testing.webp"}},{"node":{"tag":"web","title":"Considering a GraphQL switch? Here's why it is worth it.","description":"Considering a switch to GraphQL? From better data aggregation to schema stitching, here's why you should consider adopting GraphQL in your stack.","duration":"5 min read","thumbnail_alt":"Considering a GraphQL switch? Here's why it is worth it.","slug":"graphql-switch-worth-it","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":"graphql-switch-worth-it/graphql-switch-worth-it.webp"}},{"node":{"tag":"consulting","title":"What does a CTO do?","description":"There has been a lot of hand-wringing and discussions about what a CTO does on the interwebs. Does a CTO write code? Does a CTO's calendar look like it is on the maker's or the manager's schedule? Does a CTO sit in on interviews?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","description":"A manual for writers who work with cross-functional teams or roles.","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"mobile","title":"How to create shortcuts in your Android app","description":"Here's how you can implement static, dynamic and pinned shortcuts using our code snippets and guidelines.","duration":"4 min read","thumbnail_alt":"How to create shortcuts in your Android app","slug":"create-shortcuts-android-app","tarkan":{"name":"Raja Jawahar","role":"Mobile Developer","image":"raja.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"create-shortcuts-android-app/create-shortcuts-android-app.webp"}},{"node":{"tag":"mobile","title":"Launching a screen within an app using custom Siri voice commands","description":"Here's how you can configure NSUserActivity and IntentsUI in iOS to enable users to navigate to a specific screen inside an app using voice commands.","duration":"3 min read","thumbnail_alt":"Launching a screen within an app using custom Siri voice commands","slug":"launch-screen-siri-voice-commands","tarkan":{"name":"Naren Krishna","role":"iOS Developer","image":"naren.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"launch-screen-siri-voice-commands/launch-screen-siri-voice-commands.gif"}},{"node":{"tag":"web","title":"Testim 101: Automation Testing on Steroids","description":"Testim is an AI-based testing framework that helps you automate website testing. Here's a detailed review of its features, pros, and cons.","duration":"5 min read","thumbnail_alt":"Testim 101: Automation Testing on Steroids","slug":"testim-automation-testing-on-steroids","tarkan":{"name":"Sameer Kumar","role":"Technical Consultant","image":"sameer.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"testim-automation-testing-on-steroids/testim-automation-testing-on-steroids.webp"}},{"node":{"tag":"web","title":"How to setup SFTP in Golang Authentication Using Go","description":"How to setup SFTP in Golang Authentication Using Go","duration":"2 min read","thumbnail_alt":"How to setup SFTP in Golang Authentication Using Go","slug":"set-up-sftp-authentication-go","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"devops","title":"An introductory guide to functional programming concepts","description":"An introductory guide to functional programming concepts","duration":"10 min read","thumbnail_alt":"An introductory guide to functional programming concepts","slug":"introductory-guide-functional-programming-concepts","tarkan":{"name":"Sreedev Kodichath","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://sreedevk.medium.com/"}},"coverImage":"introductory-guide-functional-programming-concepts/introductory-guide-functional-programming-concepts.gif"}},{"node":{"tag":"design","title":"Trying out Material You. A tale of two background colors.","description":"Trying out Material You. A tale of two background colors.","duration":"7 min read","thumbnail_alt":"Trying out Material You. A tale of two background colors.","slug":"material-you-critique-light-mode-background-color-m3","tarkan":{"name":"Andy Reed","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@andy.reed89"}},"coverImage":"material-you-critique-light-mode-background-color-m3/material-you-critique-light-mode-background-color-m3.webp"}},{"node":{"tag":"web","title":"How to Build a Web Application using Rust — Part III","description":"How to Build a Web Application using Rust — Part III","duration":"2 min read","thumbnail_alt":"How to Build a Web Application using Rust — Part III","slug":"how-to-build-a-web-application-with-rust-part-3","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-3/how-to-build-a-web-application-with-rust-part-3.webp"}},{"node":{"tag":"devops","title":"Handling multiple environments with Helm","description":"Handling multiple environments with Helm","duration":"4 min read","thumbnail_alt":"Handling multiple environments with Helm","slug":"handling-multiple-environments-with-helm","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"handling-multiple-environments-with-helm/handling-multiple-environments-with-helm.webp"}},{"node":{"tag":"devops","title":"How to reduce your Node.js docker image size by 70%","description":"How to reduce your Node.js docker image size by 70%","duration":"4 min read","thumbnail_alt":"How to reduce your Node.js docker image size by 70%","slug":"reduce-nodejs-docker-image-size","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"reduce-nodejs-docker-image-size/how-to-reduce.gif"}},{"node":{"tag":"web","title":"How to build a Web Application with Rust: Part II","description":"How to build a Web Application with Rust: Part II","duration":"2 min read","thumbnail_alt":"How to build a Web Application with Rust: Part II","slug":"how-to-build-a-web-application-with-rust-part-2","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-2/how-to-build-a-web-application-with-rust-part-2.webp"}},{"node":{"tag":"","title":"How to build a Web Application with Rust: Part I","description":"How to build a Web Application with Rust: Part I","duration":"2 min read","thumbnail_alt":"How to build a Web Application with Rust: Part I","slug":"how-to-build-a-web-application-with-rust-part-1","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-1/how-to-build-a-web-application-with-rust-part-1.webp"}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","description":"How Tarka Labs approaches hiring.","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"devops","title":"Digital Audio 101: Playing Audio From A Microcontroller","description":"Digital Audio 101: Playing Audio From A Microcontroller","duration":"7 min read","thumbnail_alt":"Digital Audio 101: Playing Audio From A Microcontroller","slug":"digital-audio-101-playing-audio-from-a-microcontroller","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"digital-audio-101-playing-audio-from-a-microcontroller/digital-audio-101-playing-audio-from-a-microcontroller.gif"}},{"node":{"tag":"web","title":"What I learned refactoring a monolith into microservices","description":"Here are my learnings from 6 months of refactoring a monolithic MEAN stack web application running on docker inside a virtual machine.","duration":"4 min read","thumbnail_alt":"What I learned refactoring a monolith into microservices","slug":"refactoring-monolith-into-microservices","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"refactoring-monolith-into-microservices/refactoring-monolith-into-microservices.webp"}},{"node":{"tag":"consulting","title":"Don't Rewrite, Refactor: Why Brownfield Development Helps","description":"If you're finding it hard to build and ship new features, spending time to read and refactor the existing code can be better than rewriting it.","duration":"3 min read","thumbnail_alt":"Don't Rewrite, Refactor: Why Brownfield Development Helps","slug":"dont-rewrite-refactor-brownfield-development","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"dont-rewrite-refactor-brownfield-development/dont-rewrite-refactor-brownfield-development.webp"}},{"node":{"tag":"web","title":"Exploring Headless CMS","description":"Exploring Headless CMS","duration":"9 min read","thumbnail_alt":"Exploring Headless CMS","slug":"exploring-headless-cms","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"exploring-headless-cms/exploring-headless-cms.webp"}},{"node":{"tag":"blockchain","title":"My thoughts on Substrate","description":"My thoughts on Substrate","duration":"9 min read","thumbnail_alt":"My thoughts on Substrate","slug":"my-thoughts-on-substrate","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"my-thoughts-on-substrate/my-thoughts-on-substrate.webp"}},{"node":{"tag":"web","title":"Learnings from a failed product","description":"Learnings from a failed product","duration":"3 min read","thumbnail_alt":"Learnings from a failed product","slug":"learnings-from-a-failed-product","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"learning-from-a-failed-product/learning-from.webp"}},{"node":{"tag":"","title":"Filling images with mosaic colors using D3.js","description":"Filling images with mosaic colors using D3.js","duration":"3 min read","thumbnail_alt":"Filling images with mosaic colors using D3.js","slug":"filling-images-with-mosaic-colors-using-d3js","tarkan":{"name":"Alen Thomas","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@alenthomas9"}},"coverImage":"filling-images-with-mosaic-colors-using-d3js/filling-images-with-mosaic-colors-using-d3js.webp"}},{"node":{"tag":"web","title":"How To Learn Coding Through Live Streaming","description":"How To Learn Coding Through Live Streaming","duration":"5 min read","thumbnail_alt":"How To Learn Coding Through Live Streaming","slug":"learn-coding-through-live-streaming","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"learn-youtube-video/rahul-blog-1.webp"}},{"node":{"tag":"web","title":"Remote pairing in mac (with low latency)","description":"Remote pairing in mac (with low latency)","duration":"3 min read","thumbnail_alt":"Remote pairing in mac (with low latency)","slug":"remote-pairing-mac-low-latency","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Debounce in Swift","description":"All about debounce: 4 ways to achieve debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Service Mesh in Kubernetes — Pictorially","description":"Service Mesh in Kubernetes — Pictorially","duration":"5 min read","thumbnail_alt":"Service Mesh in Kubernetes — Pictorially","slug":"service-mesh-kubernetes-guide","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"service-mesh-in-kubernetes/service-mesh-2.webp"}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","description":"Guide to safely run customer javascript code in your node.js environment using vm2.","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Deploying your Rails application using dokku","description":"Deploying your Rails application using dokku","duration":"5 min read","thumbnail_alt":"Deploying your Rails application using dokku","slug":"how-to-deploy-rails-application-with-dokku","tarkan":{"name":"Vinoth","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@avinoth"}},"coverImage":"how-to-deploy-rails-application-with-dokku/header.webp"}},{"node":{"tag":"web","title":"Searching with MongoDB and Elastic Search","description":"Searching with MongoDB and Elastic Search","duration":"4 min read","thumbnail_alt":"Searching with MongoDB and Elastic Search","slug":"searching-with-mongodb-and-elastic-search","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"searching-with-mongodb-and-elastic-search/header.webp"}},{"node":{"tag":"web","title":"All You Need To Know About Comments in Ruby","description":"All You Need To Know About Comments in Ruby","duration":"5 min read","thumbnail_alt":"All You Need To Know About Comments in Ruby","slug":"all-you-need-to-know-about-comments-in-ruby","tarkan":{"name":"Sreedev Kodichath","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://sreedevk.medium.com/"}},"coverImage":"all-you-need-to-know-about-comments-in-ruby/header.webp"}},{"node":{"tag":"AI","title":"Person of Interest: How I built a Facial Recognition Machine Learning model.","description":"Person of Interest: How I built a Facial Recognition Machine Learning model.","duration":"5 min read","thumbnail_alt":"Person of Interest: How I built a Facial Recognition Machine Learning model.","slug":"building-a-facial-recognition-machine-learning-model","tarkan":{"name":"Rajiv Manivannan","role":"Developer","image":"rajiv.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"building-a-facial-recognition-machine-learning-model/1.webp"}},{"node":{"tag":"web","title":"Why we refuse fixed bid projects","description":"Why we refuse fixed bid projects","duration":"4 min read","thumbnail_alt":"Why we refuse fixed bid projects","slug":"why-we-refuse-fixed-bid-project","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-we-refuse-fixed-bid-project/why-we-refuse-fixed-big-projects.webp"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","description":"Understand kubernetes and its components with easily relatable pictorial representations.","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","description":"Look beyond react native and why flutter is exciting.","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"web","title":"PDF Comparison in Pure Ruby","description":"PDF Comparison in Pure Ruby","duration":"2 min read","thumbnail_alt":"PDF Comparison in Pure Ruby","slug":"pdf-comparison-pure-ruby","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"pdf-comparison-in-pure-ruby/pdf-comparison-in-pure-ruby.webp"}},{"node":{"tag":"careers","title":"How we hire engineers","description":"How Tarka Labs hires engineers. Published in the interest of transparency.","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","description":"Most developers spend a considerable amount of their time ssh'd into remote machines, however, few are aware of the power of ssh tunnels.","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","description":"The effectiveness of a positive mindset and the ability to self-assess.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}},{"node":{"tag":"web","title":"Event Delegation: Simple yet awesome!","description":"Event Delegation: Simple yet awesome!","duration":"2 min read","thumbnail_alt":"Event Delegation: Simple yet awesome!","slug":"event-delegation-simple-yet-awesome","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"event-delegation/event-delegation.webp"}},{"node":{"tag":"devops","title":"Automating cluster creation with Terraform on DigitalOcean","description":"Automating cluster creation with Terraform on DigitalOcean","duration":"4 min read","thumbnail_alt":"Automating cluster creation with Terraform on DigitalOcean","slug":"automating-cluster-creation-with-terraform-on-digitalocean","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":""}},{"node":{"tag":"AI","title":"Part 2- Creating a neural network using tensorflow to colorize grayscale images.","description":"Part 2- Creating a neural network using tensorflow to colorize grayscale images.\n","duration":"4 min read","thumbnail_alt":"","slug":"colorize-grayscale-images-pt-2","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":""}},{"node":{"tag":"AI","title":"Part I — Creating a neural network using tensorflow to colorize grayscale images.","description":"Part I — Creating a neural network using tensorflow to colorize grayscale images","duration":"4 min read","thumbnail_alt":"","slug":"colorize-grayscale-images-pt-1","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":""}}]}},"context":{}}