{"hash":"a92d0a7aa26f8cebd9d116562e0db9b5b999676c","data":{"blog":{"id":"9e46b9ea886a1443ffc8c1b543e2a5f9","slug":"javascript-sandbox-for-your-node-project","content":"<p>I recently encountered a situation in the client project, where I was expected to run custom user-provided code, inside my Node environment to transform data. We all know the security implication of opening up our server runtime to external code and if not done correctly, the results are deadly ranging from losing our user’s data to raising our cloud servers bills because of mining injections.</p>\n<img src=\"/blog/javascript-sandbox-for-your-node-project/hacker.webp\">\n<p>Fortunately, there is a package called vm2 which provides a sandbox for such situations so that we can provide the flexibility for our users and also keep our servers safe. Let us see how it can be configured and used.</p>\n<h1 id=\"vm2\"><a href=\"#vm2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>VM2</h1>\n<p><a href=\"https://www.npmjs.com/package/vm2?source=post_page-----e1085a4175f3--------------------------------\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VM2</a>\nis a sandbox that can run untrusted code with whitelisted Node's built-in modules. Securely!</p>\n<p>Some pointers for the sandbox:</p>\n<ol>\n<li>Uses console output of Node process</li>\n<li>Can require external &#x26; builtin modules</li>\n<li>Has the ability to setup customized access to builtin modules</li>\n<li>Uses secure context for execution using VM module</li>\n<li>Uses proxies to keep the sandbox code isolated</li>\n</ol>\n<p>Let’s get into the <strong>implementation</strong>,</p>\n<img src=\"/blog/javascript-sandbox-for-your-node-project/typing.webp\">\n<div class=\"gridsome-code-title\"><span>declaration.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> NodeVM <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vm2\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//Declaring functions to make inject them</span>\n<span class=\"token comment\">//into the sandbox</span>\n<span class=\"token keyword\">const</span> UtilFunctions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">callAPI</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Code to call API and get data</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">12342</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Utkarsh\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pune\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">12343</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yash\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mumbai\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">12344</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Piyush\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bengaluru\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">isHoliday</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Code to check if its a holiday info from db</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">holiday</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Diwali\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As the functionality is abstracted from the sandbox, all users can do is to call the functions and use the return value if any.</p>\n<div class=\"gridsome-code-title\"><span>vm config.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Disabling eval(), web assembly(wasm), external modules, setTimeout &amp; setInterval</span>\n<span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeVM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">eval</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">wasm</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">require</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//No buildin module allowed</span>\n    <span class=\"token literal-property property\">builtin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">external</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">sandbox</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">setTimeout</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">setInterval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">eval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//Providing access to UtilFunction through utils</span>\n    <span class=\"token literal-property property\">utils</span><span class=\"token operator\">:</span> UtilFunctions\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we are configuring the NodeVM to get the sandbox. We are disabling eval, wasm, external modules, setTimeout &#x26; setInterval. Also, we are not allowing any builtin modules to be used in the code. We are making the sandbox secure and execution swift with this config. Also, we are injecting the UtilFunction into the sandbox.</p>\n<div class=\"gridsome-code-title\"><span>executeJS.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Adds an uncaughtException listener onto the vm to handle vm exceptions</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">registerListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  vm<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uncaughtException\"</span><span class=\"token punctuation\">,</span> _uncaughtException<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Removes the uncaughtException listener from vm</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  vm<span class=\"token punctuation\">.</span><span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uncaughtException\"</span><span class=\"token punctuation\">,</span> _uncaughtException<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Function to handle uncaughtException of vm</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_uncaughtException</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asynchronous error caught.\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Function which is called to execute user injected JS code\n * code: String - User typed JS code is passed as a string\n * context: Object - The object on which the code performs transformations\n * Returns updated context or error\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">executeJS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Using Promise to convert callback based call to async call</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Enclosing user typed code with skeleton code for better control</span>\n    <span class=\"token comment\">//So we get JS function in string format with user's code at the core</span>\n    <span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">module.exports = function (context, resolve, reject) {\n            try{\n                </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n                resolve(context);\n            } catch(ex) {\n                reject(ex);\n            }\n        }</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token comment\">// Add listener to catch errors</span>\n    <span class=\"token function\">registerListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//vm.run converts the string formated function to JS function with callback</span>\n    <span class=\"token comment\">//which when called will execute the code inside sandbox i.e. sandboxedFunction</span>\n    <span class=\"token keyword\">let</span> sandboxedFunction <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//Pass the context to sandboxedFunction and the callback functions</span>\n    <span class=\"token comment\">//to handle success and error cases</span>\n    <span class=\"token function\">sandboxedFunction</span><span class=\"token punctuation\">(</span>\n      context<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we have declared function _uncaughtException to handle uncaughtExceptions thrown by VM. Function registerListeners will add the listener to VM and function cleanup will remove the listener from VM. This part is just to make sure the Node process won’t exit due to the user entered code.\nMoving on to executeJS function where all the magic happens, NodeVM uses callbacks in the sandbox i.e. (after the execution of code a callback will be called by sandbox to convey the result of execution) but usually, we prefer async/await for such functionality as some code will be waiting for the result of user JS execution.</p>\n<img src=\"/blog/javascript-sandbox-for-your-node-project/callback.png\">\n<p>So using promises we made this function async. Now executeJS take 2 arguments code &#x26; context. Context is a JSON object which is made available to the user entered JS code, code can make changes to context and after execution, context can be used further. In this way, we make sure that the JS execution sandbox is working as a transformer. Which at the core just modifies the context. But due to this structure for the Node process, the executeJS function is a BlackBox transformer making it better streamlined with your existing system.</p>\n<p>Next, we declare func, which is nothing but the user entered code enclosed in a function that is exported. Now we have taken care of exception handling with the exported function itself. As we discussed that VM uses callbacks so we are passing context in the first argument and 2 callbacks to handle success(resolve) &#x26; failure(reject) cases. Then we will register listeners to VM. vm.run will return the exported function we formulated in func.</p>\n<p>The final step is to call the exported function and passing context &#x26; callbacks. In the callbacks, we are calling cleanup to remove listeners from VM and resolving or rejecting the promise accordingly.\nLet’s test this,</p>\n<div class=\"gridsome-code-title\"><span>test.js</span></div><div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n            if (!context.day || !context.date) {\n                throw new Error('Day and Date both are required!');\n            }\n            let holidayInfo = utils.isHoliday({ date: context.date });\n            if(holidayInfo.holiday) {\n                context.plan = 'Happy ' + holidayInfo.name;\n            } else if (context.day.toLowerCase() == 'sunday' || context.day.toLowerCase() == 'saturday') {\n                context.plan = 'Its Weekend! Go out!';\n            } else {\n                context.plan = 'Work!';\n            }\n        </span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">day</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Saturday\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"14-Nov-20\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">executeJS</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>So, in our test, the code has the user entered code, which:</p>\n<ol>\n<li>Checks the context for date and day</li>\n<li>Uses isHoliday UtilFunction to check if its holiday</li>\n<li>Checks for weekend</li>\n<li>Sets plan on the context accordingly or throw an exception</li>\n</ol>\n<p>The executeJS function will return modified ctx or throw exception according to data.</p>\n<p>Thanks for reading… keep hacking…</p>\n"},"blogs":{"edges":[{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"ai","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"ai","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"consulting","title":"Building Serious Software","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"consulting","title":"What does a CTO do?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"mobile","title":"Debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"careers","title":"How we hire engineers","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}}]}},"context":{}}