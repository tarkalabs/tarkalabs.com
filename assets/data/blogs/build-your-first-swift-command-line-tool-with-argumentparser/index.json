{"hash":"ecdd0900c04ddda3dc9f04c04a35a79d771a4cb8","data":{"blog":{"id":"1173b87e0b99e0366cfa7f0a4d29f683","slug":"build-your-first-swift-command-line-tool-with-argumentparser","content":"<p>As a writer, I’ve been using a minimalist editor called <a href=\"https://typora.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora</a> to write my articles, and I absolutely love it. However, I realized that I wanted to be able to analyze the time it takes for readers to go through my articles. This led me to the idea of building a simple command-line tool to estimate the reading time of an input file.</p>\n<p>Command-line tools are an efficient way for developers to complete a variety of tasks. Using Swift Package Manager (SPM) and <a href=\"https://github.com/apple/swift-argument-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">swift-argument-parser</a>, it’s now super easy to create command-line tools in Swift. In this post, let’s walk through the process of building a tool to estimate reading time using these tools. By the time you’re done, you’ll have a basic understanding of how to create command-line tools in Swift and be able to apply this knowledge to your own ideas.</p>\n<h1 id=\"setting-up-the-project\"><a href=\"#setting-up-the-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setting up the project</h1>\n<p>Let’s build a simple tool called <code class=\"language-inline-text\">Readometer</code> (Read-o-meter) that reads an input file, counts the words, estimates the reading time and displays the outcome. You’ll be using Xcode and Swift Package Manager (SPM) to create your tool.</p>\n<p>To get started, you need to set up our project and there are two ways to go about it.</p>\n<h1 id=\"option-1-using-commands\"><a href=\"#option-1-using-commands\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Option 1: Using Commands</h1>\n<p>To begin with, you can create a Swift Package using the following commands.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> Readometer\n$ <span class=\"token builtin class-name\">cd</span> Readometer\n$ swift package init <span class=\"token parameter variable\">--type</span> executable</code></pre></div>\n<p>The command automatically takes the folder name as the name of the executable and generates a basic setup. You can then try following commands to see it in action.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ swift build\n$ swift run</code></pre></div>\n<p>To continue further with customizing this basic template to fit your needs, launch the project in Xcode.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ xed Package.swift</code></pre></div>\n<p>Xcode can now directly open “Package.swift” to edit sources, run tests, and so on. Give it a try!</p>\n<p>Finally, you need to add the <a href=\"https://github.com/apple/swift-argument-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">swift-argument-parser</a> — Apple’s open-sourced framework for straightforward, type-safe argument parsing for Swift — as a dependency to your package, and then include <code class=\"language-inline-text\">\"ArgumentParser\"</code> as a dependency for your executable target. Your \"Package.swift\" file will end up looking like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// swift-tools-version: 5.8</span>\n<span class=\"token comment\">// The swift-tools-version declares the minimum version of Swift required to build this package.</span>\n​\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">PackageDescription</span>\n​\n<span class=\"token keyword\">let</span> package <span class=\"token operator\">=</span> <span class=\"token class-name\">Package</span><span class=\"token punctuation\">(</span>\n   name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Readometer\"</span></span><span class=\"token punctuation\">,</span>\n   products<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">executable</span><span class=\"token punctuation\">(</span>\n           name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"readometer\"</span></span><span class=\"token punctuation\">,</span>\n           targets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"Readometer\"</span></span><span class=\"token punctuation\">]</span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://github.com/apple/swift-argument-parser.git\"</span></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token function\">upToNextMajor</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"1.0.0\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   targets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">executableTarget</span><span class=\"token punctuation\">(</span>\n           name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Readometer\"</span></span><span class=\"token punctuation\">,</span>\n           dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ArgumentParser\"</span></span><span class=\"token punctuation\">,</span> package<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"swift-argument-parser\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n           path<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Sources\"</span></span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"option-2-using-xcode\"><a href=\"#option-2-using-xcode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Option 2: Using Xcode</h1>\n<p>Or alternatively, you can just use Xcode’s new project template and choose the Command Line Tool application under macOS (as shown in the picture below).</p>\n<figure><img src=\"/blog/build-your-first-swift-command-line-tool-with-argumentparser/xcode-cli.webp\" alt=\"Xcode’s new project template for CLI\"><figcaption>Xcode’s new project template for CLI</figcaption></figure>\n<p>Then, in a typical way, under the Package Dependencies section of the project, search for ‘swift-argument-parser’ and select it.</p>\n<p>With these steps, you’ll now have a new Swift command-line tool project set up in Xcode with ArgumentParser added as a dependency. You can now move on to the next step of defining your command-line arguments.</p>\n<h1 id=\"defining-command-line-arguments\"><a href=\"#defining-command-line-arguments\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Defining command-line arguments</h1>\n<p>Now that you have your project set up, it’s time to define the expectations. Once you’ve built the <code class=\"language-inline-text\">readometer</code> tool, you should be able to run it like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ readometer estimate <span class=\"token operator\">&lt;</span>a <span class=\"token function\">file</span> path<span class=\"token operator\">></span> <span class=\"token parameter variable\">--verbose</span>\nEstimated reading time: <span class=\"token number\">10</span> minutes</code></pre></div>\n<p>The command in the code above is ‘readometer’, the subcommand is ‘estimate’, ‘a file path’ would be an argument, and a flag is appended.</p>\n<p>Create a command that directly accepts the file path argument using ArgumentParser. Subcommand and flag options can wait till later.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Readometer.swift</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">ArgumentParser</span>\n​\n<span class=\"token attribute atrule\">@main</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Readometer</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token attribute atrule\">@Argument</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">CommandConfiguration</span><span class=\"token punctuation\">(</span>\n       abstract<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A Swift command-line tool for estimating the reading time of articles.\"</span></span>\n   <span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// 1. Extract only text contents from the file</span>\n       <span class=\"token comment\">// let plainText = try Readometer.getFileContents(from: inputFile)</span>\n\n       <span class=\"token comment\">// 2. Calculate the estimated reading time in minutes..</span>\n       <span class=\"token comment\">// let wordCount = Readometer.wordCount(from: plainText)</span>\n       <span class=\"token comment\">// let avgReadingSpeed = 200</span>\n       <span class=\"token comment\">// let readingTime = Double(wordCount) / Double(avgReadingSpeed)</span>\n​\n       <span class=\"token comment\">// 3. print the estimated reading time..</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"✨✨✨\\nEstimated reading time: [readingTime] minutes\\n✨✨✨\"</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is what you can do to get the code as seen above:</p>\n<ol>\n<li>Rename the file ‘main.swift’ to ‘Readometer.swift’ and define a struct that follows the <code class=\"language-inline-text\">ParsableCommand</code> protocol.</li>\n<li>Did you notice that the type is prefixed with <code class=\"language-inline-text\">@main</code>? That denotes the starting point of your command's execution.</li>\n<li>A property wrapper prefixed with <code class=\"language-inline-text\">@Argument</code> acts as a positional command-line input. <code class=\"language-inline-text\">filePath</code> is the first command-line input in this scenario.</li>\n<li>You must implement all of your logic in the <code class=\"language-inline-text\">run()</code> method.</li>\n</ol>\n<p><strong>Note:</strong> The Swift compiler uses either the type marked with <code class=\"language-inline-text\">@main</code> or a ‘main.swift’ file as the entry point for an executable program. You may use one or the other, but not both.</p>\n<p>With these steps, you’ve defined your first command-line arguments and are ready to move on to implementing the subcommand of your tool.</p>\n<p>You can always see how it works by executing the following commands:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ swift build\n$ swift run readometer /Desktop/Files/index.md</code></pre></div>\n<p>To introduce the subcommand <code class=\"language-inline-text\">estimate</code>, let's refactor the Readometer type as shown below.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Readometer.swift</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">ArgumentParser</span>\n​\n<span class=\"token attribute atrule\">@main</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Readometer</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">CommandConfiguration</span><span class=\"token punctuation\">(</span>\n       abstract<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A Swift command-line tool for estimating the reading time of articles.\"</span></span><span class=\"token punctuation\">,</span>\n       subcommands<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Estimate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Estimate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token attribute atrule\">@Argument</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n   <span class=\"token comment\">// Defines the average reading speed in words per minute (wpm)</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> averageReadingSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n​\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">CommandConfiguration</span><span class=\"token punctuation\">(</span>abstract<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Estimates Reading Time.\"</span></span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// 1. Extract only text contents from the file</span>\n       <span class=\"token comment\">// let plainText = try Readometer.getFileContents(from: filePath)</span>\n\n       <span class=\"token comment\">// 2. Calculate the estimated reading time in minutes..</span>\n       <span class=\"token comment\">// let wordCount = Readometer.wordCount(from: plainText)</span>\n       <span class=\"token comment\">// let avgReadingSpeed = Readometer.Estimate.averageReadingSpeed</span>\n       <span class=\"token comment\">// let readingTime = Double(wordCount) / Double(avgReadingSpeed)</span>\n​\n       <span class=\"token comment\">// 3. print the estimated reading time..</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"✨✨✨\\nEstimated reading time: [readingTime] minutes\\n✨✨✨\"</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, I’ve used a static <code class=\"language-inline-text\">configuration</code> property to transform <code class=\"language-inline-text\">Readometer</code> to a root command and specify a subcommand. The <code class=\"language-inline-text\">Estimate</code> subcommand similarly conforms the <code class=\"language-inline-text\">ParsableCommand</code> protocol and takes over functionality from the root.</p>\n<p>If you’re wondering why subcommands are needed in the first place, you’ll find out soon enough when you add multiple utility capabilities to the Readometer tool.</p>\n<p>Finally, adding a flag is just as simple with ArgumentParser’s <code class=\"language-inline-text\">@Flag</code> property wrapper.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Estimate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Argument</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token attribute atrule\">@Flag</span> <span class=\"token keyword\">var</span> verbose <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token comment\">// Defines the average reading speed in words per minute (wpm)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> averageReadingSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n​\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">CommandConfiguration</span><span class=\"token punctuation\">(</span>abstract<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Estimates Reading Time.\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// 1. Extract only text contents from the file</span>\n       <span class=\"token comment\">// let plainText = try Readometer.getFileContents(from: filePath)</span>\n       <span class=\"token keyword\">if</span> verbose <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Estimating reading time for '</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span>inputFile<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>pathString<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token comment\">// 2. Calculate the estimated reading time in minutes..</span>\n       <span class=\"token comment\">// let wordCount = Readometer.wordCount(from: plainText)</span>\n       <span class=\"token comment\">// let avgReadingSpeed = Readometer.Estimate.averageReadingSpeed</span>\n       <span class=\"token comment\">// let readingTime = wordCount / avgReadingSpeed</span>\n       <span class=\"token keyword\">if</span> verbose <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Word count/Avg Reading Speed: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">wordCount</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">/</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">avgSpeed</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token comment\">// 3. print the estimated reading time..</span>\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"✨✨✨\\nEstimated reading time: [readingTime] minutes\\n✨✨✨\"</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It’s finally time to implement an important functionality in your little utility tool. Integrate the following assistance methods and uncomment the relevant commented out sections.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Readometer</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getFileContents</span><span class=\"token punctuation\">(</span>from filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// Get the path to the file</span>\n       <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> inputFile <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>inputFile<span class=\"token punctuation\">.</span>isEmpty <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token class-name\">RuntimeError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Please provide the path to a file as an argument.\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token comment\">// Load the contents of the file into a string</span>\n       <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> fileContents <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>contentsOfFile<span class=\"token punctuation\">:</span> inputFile<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token class-name\">RuntimeError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Couldn't read from '</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">inputFile</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">'!\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token comment\">// Determine file type</span>\n       <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> fileType <span class=\"token operator\">=</span> <span class=\"token class-name\">FileType</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">:</span> inputFile<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token class-name\">RuntimeError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Unsupported file type '</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">inputFile</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">'!\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token keyword\">let</span> plainText<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n       <span class=\"token keyword\">switch</span> fileType <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n           plainText <span class=\"token operator\">=</span> fileContents\n\n       <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">:</span>\n           <span class=\"token comment\">// Strip Markdown syntax if necessary</span>\n           <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">NSRegularExpression</span><span class=\"token punctuation\">(</span>\n               pattern<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">#\"(!?\\[.*?\\]\\(.*?\\))|(\\*\\*.*?\\*\\*)|(__.*?__)|(`.*?`)|(\\*.*?\\*)|(_.*?_)|#.*?\\n|\\n-{3,}\\n|`{3}.*?\\n|`.*?`\"#</span></span>\n           <span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">throw</span> <span class=\"token class-name\">RuntimeError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Failed to read Markdown file '</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">inputFile</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">'!\"</span></span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span>\n           plainText <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">stringByReplacingMatches</span><span class=\"token punctuation\">(</span>\n               <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> fileContents<span class=\"token punctuation\">,</span>\n               range<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSRange</span><span class=\"token punctuation\">(</span>fileContents<span class=\"token punctuation\">.</span>startIndex<span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               withTemplate<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"$1\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token keyword\">return</span> plainText\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">wordCount</span><span class=\"token punctuation\">(</span>from plainText<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n\n       <span class=\"token comment\">// Split the plain text into words and remove any whitespace or non-alphanumeric characters.</span>\n       <span class=\"token keyword\">let</span> words <span class=\"token operator\">=</span> plainText<span class=\"token punctuation\">.</span><span class=\"token function\">components</span><span class=\"token punctuation\">(</span>separatedBy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>whitespacesAndNewlines<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> word <span class=\"token keyword\">in</span>\n               word<span class=\"token punctuation\">.</span><span class=\"token function\">trimmingCharacters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CharacterSet</span><span class=\"token punctuation\">.</span>alphanumerics<span class=\"token punctuation\">.</span>inverted<span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">.</span><span class=\"token function\">lowercased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">.</span>compactMap <span class=\"token punctuation\">{</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>isEmpty <span class=\"token operator\">?</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">:</span> <span class=\"token short-argument\">$0</span> <span class=\"token punctuation\">}</span>\n\n       <span class=\"token keyword\">return</span> words<span class=\"token punctuation\">.</span>count\n   <span class=\"token punctuation\">}</span>\n\n\n   <span class=\"token keyword\">enum</span> <span class=\"token class-name\">FileType</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CaseIterable</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">case</span> text\n       <span class=\"token keyword\">case</span> markdown\n\n       <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">FileType</span><span class=\"token punctuation\">.</span>allCases<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n               filePath<span class=\"token punctuation\">.</span><span class=\"token function\">hasSuffix</span><span class=\"token punctuation\">(</span><span class=\"token short-argument\">$0</span><span class=\"token punctuation\">.</span>fileExtension<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n           <span class=\"token punctuation\">}</span>\n           <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> type\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token keyword\">var</span> fileExtension<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n               <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\".txt\"</span></span>\n           <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">:</span>\n               <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\".md\"</span></span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">// MARK: - Error</span>\n\n   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">RuntimeError</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomStringConvertible</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> description<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n       <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> description<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Build and run!</p>\n<h1 id=\"how-to-define-multiple-subcommands\"><a href=\"#how-to-define-multiple-subcommands\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to define multiple subcommands</h1>\n<p>Wouldn’t it be great if your tool could count the words in your article file as well? You can add this additional functionality if you include a second subcommand called — <code class=\"language-inline-text\">word-count</code>. This is what it should look like:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ readometer word-count <span class=\"token operator\">&lt;</span>a <span class=\"token function\">file</span> path<span class=\"token operator\">></span> <span class=\"token parameter variable\">--verbose</span>\nWord Count: <span class=\"token number\">2073</span></code></pre></div>\n<p>Duplicate the Estimate type implementation and change it to look like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">WordCount</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableCommand</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token attribute atrule\">@Argument</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n   <span class=\"token attribute atrule\">@Flag</span> <span class=\"token keyword\">var</span> verbose <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">CommandConfiguration</span><span class=\"token punctuation\">(</span>abstract<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Word Counter.\"</span></span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// Extract only text contents from the file</span>\n       <span class=\"token keyword\">let</span> plainText <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">Readometer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFileContents</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> filePath<span class=\"token punctuation\">)</span>\n\n       <span class=\"token keyword\">if</span> verbose <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Calculating word count for '</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> filePath<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n\n       <span class=\"token keyword\">let</span> wordCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Readometer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wordCount</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> plainText<span class=\"token punctuation\">)</span>\n\n       <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"🎉🎉🎉\\nWord Count: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">wordCount</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\\n🎉🎉🎉\"</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s change the <code class=\"language-inline-text\">Readometer</code> type's configuration to look like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">CommandConfiguration</span><span class=\"token punctuation\">(</span>\n       abstract<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A Swift command-line tool for estimating the reading time of articles.\"</span></span><span class=\"token punctuation\">,</span>\n       subcommands<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Estimate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">WordCount</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       defaultSubcommand<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Estimate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>\n   <span class=\"token punctuation\">)</span></code></pre></div>\n<p>Keep in mind that each subcommand is ultimately independent and can specify a combination of shared and unique arguments. The purpose of duplicating the Estimate type was to demonstrate its nature.</p>\n<h1 id=\"adding-enhancements-to-the-tool\"><a href=\"#adding-enhancements-to-the-tool\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding enhancements to the tool</h1>\n<p>There are a few improvements that you can make while keeping usability and convenience in mind as your tool eventually assumes its final form. Let’s look into these.</p>\n<h1 id=\"named-options\"><a href=\"#named-options\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Named Options</h1>\n<p>For the article file path, the tool only needs one argument, and it works just well. However, you can include an additional method for providing input files to improve the clarity of the argument available with the tool. Make the following changes:</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Argument</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n<span class=\"token attribute atrule\">@Option</span> <span class=\"token keyword\">var</span> inputFilePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n<span class=\"token attribute atrule\">@Flag</span> <span class=\"token keyword\">var</span> verbose <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>The <code class=\"language-inline-text\">@Option</code> property wrapper represents a command-line input that looks like <code class=\"language-inline-text\">--name value></code>, with the name derived from the name of your property. But since the property name is slightly lengthier, you can use the property wrapper to specify a custom shorthand, as illustrated below.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@Option</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>short<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token function\">customLong</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"input\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> inputFilePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span></code></pre></div>\n<p>Update the <code class=\"language-inline-text\">run()</code> method in both the subcommand types.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get the path to the file</span>\n    <span class=\"token keyword\">var</span> inputFile<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>inputFilePath\n    <span class=\"token comment\">// if users are familiar with argument, we will make their life easy.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> filePath <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>filePath <span class=\"token punctuation\">{</span>\n            inputFile <span class=\"token operator\">=</span> filePath\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Extract only text contents from the file</span>\n    <span class=\"token keyword\">let</span> plainText <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">Readometer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFileContents</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> inputFile<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ..</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this update, you should also be able to do the following:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ readometer estimate <span class=\"token parameter variable\">--input</span> <span class=\"token operator\">&lt;</span>a <span class=\"token function\">file</span> path<span class=\"token operator\">></span> <span class=\"token parameter variable\">--verbose</span>\nEstimated reading time: <span class=\"token number\">10</span> minutes</code></pre></div>\n<h1 id=\"optiongroup\"><a href=\"#optiongroup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OptionGroup</h1>\n<p>If you observe closely, each subcommand specifies its own arguments, but they are identical, implying that it makes more sense for it to be shared among subcommands in this scenario. With the help of <code class=\"language-inline-text\">ParsableArguments</code>, you can achieve this.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Options</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableArguments</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token attribute atrule\">@Flag</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>shortAndLong<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> verbose<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n   <span class=\"token attribute atrule\">@Argument</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilePath</span><span class=\"token operator\">?</span>\n\n   <span class=\"token attribute atrule\">@Option</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>short<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token function\">customLong</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"input\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> inputFilePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilePath</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example, I’ve defined a ParsableArguments type with properties that will be shared across multiple subcommands. Types that conform to ParsableArguments can be parsed from command-line arguments, but don’t provide any execution through a <code class=\"language-inline-text\">run()</code> method.</p>\n<p>Replace all the existing properties in your subcommands with following line.</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@OptionGroup</span> <span class=\"token keyword\">var</span> options<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Options</span></code></pre></div>\n<h1 id=\"providing-help\"><a href=\"#providing-help\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Providing Help</h1>\n<p>You may have observed that when the `-h` or `— help` flags are used, `ArgumentParser` automatically generates help for any command. But they are missing the descriptions. Let’s add that now by passing string literals as the <code class=\"language-inline-text\">help</code> parameter:</p>\n<div class=\"gridsome-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Options</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ParsableArguments</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token attribute atrule\">@Flag</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>shortAndLong<span class=\"token punctuation\">,</span> help<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Show status updates for debugging purposes.\"</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> verbose<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n   <span class=\"token attribute atrule\">@Argument</span><span class=\"token punctuation\">(</span>help<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"The input file path.\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> filePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilePath</span><span class=\"token operator\">?</span>\n\n   <span class=\"token attribute atrule\">@Option</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>short<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token function\">customLong</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"input\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> help<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"A path to a file to read.\"</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">var</span> inputFilePath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilePath</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Give it a try now.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ readometer <span class=\"token parameter variable\">--help</span></code></pre></div>\n<h1 id=\"installing-the-tool\"><a href=\"#installing-the-tool\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing the tool</h1>\n<p>It’s time to put your tool through its paces and see how it performs.</p>\n<figure><img src=\"/blog/build-your-first-swift-command-line-tool-with-argumentparser/readometer-cli.gif\" alt=\"Demo of Readometer CLI Tool\"><figcaption>Demo of Readometer CLI Tool</figcaption></figure>\n<p>More than ready to ship, it seems. How do you ship it then?</p>\n<p>To use it personally or manually, you’ll need to build it with the release configuration and copy the executable generated in the <code class=\"language-inline-text\">.build/release</code> folder into the <code class=\"language-inline-text\">/usr/local/bin</code> folder.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ swift build <span class=\"token parameter variable\">-c</span> release\n$ <span class=\"token builtin class-name\">cd</span> .build/release\n$ <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-f</span> Readometer /usr/local/bin/readometer</code></pre></div>\n<p>Or, use <a href=\"https://github.com/yonaskolb/mint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mint</a> to install the Package using:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mint <span class=\"token function\">install</span> ajithrnayak/Readometer</code></pre></div>\n<h1 id=\"thats-all-folks\"><a href=\"#thats-all-folks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>That’s all, folks!</h1>\n<p>This was my first Swift Command-Line Tool built using Swift Package Manager(SPM) and ArgumentParser. With these powerful tools, creating command-line tools in Swift is now easier than ever.</p>\n<p>If you want to explore the code, you can find the Github repository for the Readometer here: <a href=\"https://github.com/ajithrnayak/Readometer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ajithrnayak/Readometer</a>.</p>\n<p>I’m sure you’ll now have a basic understanding of how to create your own Swift command-line tools using ArgumentParser. From here, you can expand upon the functionality of your tool and create more complex tools to boost your development productivity.</p>\n<p>Let me know if you have any suggestions. Till the next one! ✌️</p>\n<blockquote>\n<p><em>Hi! I’m</em> <a href=\"https://ajith.xyz/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Ajith</em></a><em>, a senior software engineer and wannabe designer based in Bengaluru, India. With nearly a decade of experience in iOS development, I’m currently building immersive mobile experiences</em> <a href=\"https://tarkalabs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>@Tarka Labs</em></a><em>.</em></p>\n</blockquote>\n"},"blogs":{"edges":[{"node":{"tag":"web","title":"Inserting Millions of Records in Java: Strategies and Benchmarks","description":"Inserting Millions of Records in Java: Strategies and Benchmarks","duration":"11 min read","thumbnail_alt":"Inserting Millions of Records in Java: Strategies and Benchmarks","slug":"inserting-millions-of-records-in-java","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"inserting-millions-of-records-in-java/image-2.png"}},{"node":{"tag":"web","title":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 2)","description":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 2)","duration":"5 min read","thumbnail_alt":"","slug":"scaling-royalty-payout-p2","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"web","title":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 1)","description":"Scaling Royalty Payouts in Music Distribution: Challenges and Solutions from the Frontlines (Part 1)","duration":"6 min read","thumbnail_alt":"","slug":"scaling-royalty-payout-p1","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"careers","title":"A Marketer's Guide to Surviving B2B IT Consulting","description":"","duration":"3 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"a-marketers-guide-to-surviving-b2b-it-consulting","tarkan":{"name":"Saudnya Kharade","role":"Brand Specialist","image":"saudnya.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"a-marketers-guide/b2b-blog.webp"}},{"node":{"tag":"web","title":"Blockchain as public ledger","description":"","duration":"5 min read","thumbnail_alt":"Blockchain FTW","slug":"smart-contracts-store-information","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"web","title":"Using Tarka Chat in your React/Vue apps","description":"Using Tarka Chat in your React/Vue apps","duration":"5 min read","thumbnail_alt":"Using Tarka Chat in your React/Vue apps","slug":"using-tarka-chat-in-your-react-vue-apps","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"using-tarka-chat-in-your-react-vue-apps/Photo-by-Volodymyr-Hryshchenko-on-Unsplash.webp"}},{"node":{"tag":"web","title":"Neovim as a java IDE","description":"Neovim as a java IDE","duration":"5 min read","thumbnail_alt":"Neovim as a java IDE","slug":"neovim-as-java-ide","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":""}},{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","description":"Navigating change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"AI","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","description":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Functional Programming for Humans — Foundations","description":"Functional Programming for Humans — Foundations","duration":"6 min read","thumbnail_alt":"Functional Programming for Humans — Foundations","slug":"functional-programming-for-humans-foundation","tarkan":{"name":"Sameer Kumar","role":"Technical Consultant","image":"sameer.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"functional-programming-for-humans-foundation/Functional-Programming-for-Humans—Foundations.webp"}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","description":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","description":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","description":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"AI","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","description":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"devops","title":"OpenText Magellan and AKS: An unofficial deployment guide","description":"OpenText Magellan and AKS: An unofficial deployment guide","duration":"11 min read","thumbnail_alt":"OpenText Magellan and AKS: An unofficial deployment guide","slug":"opentext-magellan-aks-unofficial-deployment-guide","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":""}},{"node":{"tag":"web","title":"Searching For The Perfect Fit: Our Move from Algolia to Typesense","description":"Our search for an open-source, cost-effective, scalable, and self-hosted solution led us to Typesense, an alternative to the very popular Algolia.","duration":"5 min read","thumbnail_alt":"Searching For The Perfect Fit: Our Move from Algolia to Typesense","slug":"searching-perfect-fit-move-from-algolia-to-typesense","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"searching-perfect-fit-move-from-algolia-to-typesense/searching-perfect-fit-move-from-algolia-to-typesense.webp"}},{"node":{"tag":"mobile","title":"5 essential tools and tips for every iOS developer","description":"5 essential tools and tips for every iOS developer","duration":"4 min read","thumbnail_alt":"5 essential tools and tips for every iOS developer","slug":"essential-tools-and-tips-for-every-ios-developer","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"ios-tips-and-tools/Recommended-tools-tips-for-iOS-developers.png"}},{"node":{"tag":"web","title":"Build your first Swift command-line tool with ArgumentParser","description":"Using Swift Package Manager (SPM) and swift-argument-parser, it's easy to create command-line tools in Swift. Here's how you can do it.","duration":"10 min read","thumbnail_alt":"Build your first Swift command-line tool with ArgumentParser","slug":"build-your-first-swift-command-line-tool-with-argumentparser","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"build-your-first-swift-command-line-tool-with-argumentparser/build-your-first-swift-command-line-tool-with-argumentparser.webp"}},{"node":{"tag":"mobile","title":"The ultimate VPN detection guide for iOS and Android","description":"The ultimate VPN detection guide for iOS and Android","duration":"3 min read","thumbnail_alt":"The ultimate VPN detection guide for iOS and Android","slug":"vpn-detection-guide-ios-android","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"the-ultimate-vpn-detection/the-ultimate-vpn.webp"}},{"node":{"tag":"mobile","title":"React Native vs. Flutter in 2023: A Comprehensive Comparison","description":"A detailed comparison of React Native vs. Flutter to help engineering managers make decisions on how, where, and when to use React or Flutter.","duration":"14 min read","thumbnail_alt":"React Native vs. Flutter in 2023: A Comprehensive Comparison","slug":"react-native-vs-flutter-2023-comparison","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"react-native-vs-flutter-2023-comparison/react-native-vs-flutter-2023-comparison.webp"}},{"node":{"tag":"mobile","title":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","description":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","duration":"3 min read","thumbnail_alt":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","slug":"kotlin-multiplatform-mobile","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"kotlin-multiplatform-mobile/kotlin-multiplatform-mobile.webp"}},{"node":{"tag":"web","title":"Reshaping data with PostgreSQL pivot tables","description":"Reshaping data with PostgreSQL pivot tables","duration":"4 min read","thumbnail_alt":"Reshaping data with PostgreSQL pivot tables","slug":"reshaping-data-postgresql-pivot-tables","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"reshaping-data-with-postgres/reshaping-data-with-postgreSQL.webp"}},{"node":{"tag":"web","title":"Effortlessly update YouTube videos on your Gridsome site","description":"How to build an auto-updating YouTube feed on your site using the YouTube API and Gridsome for Vue.js with step-by-step instructions and code samples.","duration":"10 min read","thumbnail_alt":"Effortlessly update YouTube videos on your Gridsome site","slug":"effortlessly-update-youtube-videos-on-your-gridsome-site","tarkan":{"name":"Ajith Renjala","role":"A tarkan","image":"bitman.png","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ajithrnayak"}},"coverImage":"effortlessly-update-youtube-videos-on-your-gridsome-site/effortlessly-update-youtube-videos-on-your-gridsome-site.webp"}},{"node":{"tag":"devops","title":"The only in-depth AWS ECS monitoring solution you'll need","description":"This is a detailed blog on how to set up in-depth AWS ECS monitoring. The bundled alerts that come with ECS are inadequate. DevOps teams need more insight to be efficient.","duration":"6 min read","thumbnail_alt":"The only in-depth AWS ECS monitoring solution you'll need","slug":"aws-ecs-monitoring-solution","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"aws-ecs-monitoring-solution/cover.gif"}},{"node":{"tag":"devops","title":"Designing a centralized alert routing system using AWS Lambda","description":"Who wouldn't love a centralized monitoring and alerting system, right? Are you in the process of consolidating all your alerting systems into a single one?","duration":"4 min read","thumbnail_alt":"Designing a centralized alert routing system using AWS Lambda","slug":"centralized-alert-routing-system-aws-lambda","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"centralized-alert-routing-system-aws-lambda/cover.gif"}},{"node":{"tag":"web","title":"Rate limiting for distributed environments","description":"Different ways to architect distributed environments with rate limiting code snippets available","duration":"5 min read","thumbnail_alt":"Rate limiting for distributed environments","slug":"rate-limiting-for-distributed-environments","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"rate-limiting-for-distributed-environments/rate-limiting-for-distributed-environments.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","description":"Imagine you recently joined a new team, and after a couple of weeks, you were assigned a bug ticket. You look at the ticket and decide to see if this issue surfaced in the past and so do a search in the bug tracking tool.","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"mobile","title":"Java Life vs Kotlin Life","description":"Developers using Kotlin don't use it to its fullest potential because they use it just like Java. Kotlin is so much more powerful and concise. Here's how.","duration":"3 min read","thumbnail_alt":"Java Life vs Kotlin Life","slug":"java-life-vs-kotlin-life","tarkan":{"name":"Nandagopal Ravichandran","role":"Mobile Developer","image":"nanda.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"java-life-vs-kotlin-life/java-life-vs-kotlin-life.webp"}},{"node":{"tag":"consulting","title":"Building Serious Software","description":"Do you know what every software startup entrepreneur dreams of after they validate the market? Software that does not break with scale and is adaptable to change.","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","description":"As developers, it is necessary to understand how the code we write helps solve real-world problems. Often, it is easier to think about users while writing the application layer of code.","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"web","title":"Rust : Testing API Requests — HttpMock","description":"Rust : Testing API Requests — HttpMock","duration":"3 min read","thumbnail_alt":"Rust : Testing API Requests — HttpMock","slug":"rust-testing-api-requests-httpmock","tarkan":{"name":"Arun Kumar","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@arunkumar_33617"}},"coverImage":"rust-testing/Rust-testing.webp"}},{"node":{"tag":"web","title":"Considering a GraphQL switch? Here's why it is worth it.","description":"Considering a switch to GraphQL? From better data aggregation to schema stitching, here's why you should consider adopting GraphQL in your stack.","duration":"5 min read","thumbnail_alt":"Considering a GraphQL switch? Here's why it is worth it.","slug":"graphql-switch-worth-it","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":"graphql-switch-worth-it/graphql-switch-worth-it.webp"}},{"node":{"tag":"consulting","title":"What does a CTO do?","description":"There has been a lot of hand-wringing and discussions about what a CTO does on the interwebs. Does a CTO write code? Does a CTO's calendar look like it is on the maker's or the manager's schedule? Does a CTO sit in on interviews?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","description":"A manual for writers who work with cross-functional teams or roles.","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"mobile","title":"How to create shortcuts in your Android app","description":"Here's how you can implement static, dynamic and pinned shortcuts using our code snippets and guidelines.","duration":"4 min read","thumbnail_alt":"How to create shortcuts in your Android app","slug":"create-shortcuts-android-app","tarkan":{"name":"Raja Jawahar","role":"Mobile Developer","image":"raja.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"create-shortcuts-android-app/create-shortcuts-android-app.webp"}},{"node":{"tag":"mobile","title":"Launching a screen within an app using custom Siri voice commands","description":"Here's how you can configure NSUserActivity and IntentsUI in iOS to enable users to navigate to a specific screen inside an app using voice commands.","duration":"3 min read","thumbnail_alt":"Launching a screen within an app using custom Siri voice commands","slug":"launch-screen-siri-voice-commands","tarkan":{"name":"Naren Krishna","role":"iOS Developer","image":"naren.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"launch-screen-siri-voice-commands/launch-screen-siri-voice-commands.gif"}},{"node":{"tag":"web","title":"Testim 101: Automation Testing on Steroids","description":"Testim is an AI-based testing framework that helps you automate website testing. Here's a detailed review of its features, pros, and cons.","duration":"5 min read","thumbnail_alt":"Testim 101: Automation Testing on Steroids","slug":"testim-automation-testing-on-steroids","tarkan":{"name":"Sameer Kumar","role":"Technical Consultant","image":"sameer.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"testim-automation-testing-on-steroids/testim-automation-testing-on-steroids.webp"}},{"node":{"tag":"web","title":"How to setup SFTP in Golang Authentication Using Go","description":"How to setup SFTP in Golang Authentication Using Go","duration":"2 min read","thumbnail_alt":"How to setup SFTP in Golang Authentication Using Go","slug":"set-up-sftp-authentication-go","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"devops","title":"An introductory guide to functional programming concepts","description":"An introductory guide to functional programming concepts","duration":"10 min read","thumbnail_alt":"An introductory guide to functional programming concepts","slug":"introductory-guide-functional-programming-concepts","tarkan":{"name":"Sreedev Kodichath","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://sreedevk.medium.com/"}},"coverImage":"introductory-guide-functional-programming-concepts/introductory-guide-functional-programming-concepts.gif"}},{"node":{"tag":"design","title":"Trying out Material You. A tale of two background colors.","description":"Trying out Material You. A tale of two background colors.","duration":"7 min read","thumbnail_alt":"Trying out Material You. A tale of two background colors.","slug":"material-you-critique-light-mode-background-color-m3","tarkan":{"name":"Andy Reed","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@andy.reed89"}},"coverImage":"material-you-critique-light-mode-background-color-m3/material-you-critique-light-mode-background-color-m3.webp"}},{"node":{"tag":"web","title":"How to Build a Web Application using Rust — Part III","description":"How to Build a Web Application using Rust — Part III","duration":"2 min read","thumbnail_alt":"How to Build a Web Application using Rust — Part III","slug":"how-to-build-a-web-application-with-rust-part-3","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-3/how-to-build-a-web-application-with-rust-part-3.webp"}},{"node":{"tag":"devops","title":"Handling multiple environments with Helm","description":"Handling multiple environments with Helm","duration":"4 min read","thumbnail_alt":"Handling multiple environments with Helm","slug":"handling-multiple-environments-with-helm","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"handling-multiple-environments-with-helm/handling-multiple-environments-with-helm.webp"}},{"node":{"tag":"devops","title":"How to reduce your Node.js docker image size by 70%","description":"How to reduce your Node.js docker image size by 70%","duration":"4 min read","thumbnail_alt":"How to reduce your Node.js docker image size by 70%","slug":"reduce-nodejs-docker-image-size","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"reduce-nodejs-docker-image-size/how-to-reduce.gif"}},{"node":{"tag":"web","title":"How to build a Web Application with Rust: Part II","description":"How to build a Web Application with Rust: Part II","duration":"2 min read","thumbnail_alt":"How to build a Web Application with Rust: Part II","slug":"how-to-build-a-web-application-with-rust-part-2","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-2/how-to-build-a-web-application-with-rust-part-2.webp"}},{"node":{"tag":"","title":"How to build a Web Application with Rust: Part I","description":"How to build a Web Application with Rust: Part I","duration":"2 min read","thumbnail_alt":"How to build a Web Application with Rust: Part I","slug":"how-to-build-a-web-application-with-rust-part-1","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"how-to-build-a-web-application-with-rust-part-1/how-to-build-a-web-application-with-rust-part-1.webp"}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","description":"How Tarka Labs approaches hiring.","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"devops","title":"Digital Audio 101: Playing Audio From A Microcontroller","description":"Digital Audio 101: Playing Audio From A Microcontroller","duration":"7 min read","thumbnail_alt":"Digital Audio 101: Playing Audio From A Microcontroller","slug":"digital-audio-101-playing-audio-from-a-microcontroller","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"digital-audio-101-playing-audio-from-a-microcontroller/digital-audio-101-playing-audio-from-a-microcontroller.gif"}},{"node":{"tag":"web","title":"What I learned refactoring a monolith into microservices","description":"Here are my learnings from 6 months of refactoring a monolithic MEAN stack web application running on docker inside a virtual machine.","duration":"4 min read","thumbnail_alt":"What I learned refactoring a monolith into microservices","slug":"refactoring-monolith-into-microservices","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"refactoring-monolith-into-microservices/refactoring-monolith-into-microservices.webp"}},{"node":{"tag":"consulting","title":"Don't Rewrite, Refactor: Why Brownfield Development Helps","description":"If you're finding it hard to build and ship new features, spending time to read and refactor the existing code can be better than rewriting it.","duration":"3 min read","thumbnail_alt":"Don't Rewrite, Refactor: Why Brownfield Development Helps","slug":"dont-rewrite-refactor-brownfield-development","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"dont-rewrite-refactor-brownfield-development/dont-rewrite-refactor-brownfield-development.webp"}},{"node":{"tag":"web","title":"Exploring Headless CMS","description":"Exploring Headless CMS","duration":"9 min read","thumbnail_alt":"Exploring Headless CMS","slug":"exploring-headless-cms","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"exploring-headless-cms/exploring-headless-cms.webp"}},{"node":{"tag":"blockchain","title":"My thoughts on Substrate","description":"My thoughts on Substrate","duration":"9 min read","thumbnail_alt":"My thoughts on Substrate","slug":"my-thoughts-on-substrate","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"my-thoughts-on-substrate/my-thoughts-on-substrate.webp"}},{"node":{"tag":"web","title":"Learnings from a failed product","description":"Learnings from a failed product","duration":"3 min read","thumbnail_alt":"Learnings from a failed product","slug":"learnings-from-a-failed-product","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"learning-from-a-failed-product/learning-from.webp"}},{"node":{"tag":"","title":"Filling images with mosaic colors using D3.js","description":"Filling images with mosaic colors using D3.js","duration":"3 min read","thumbnail_alt":"Filling images with mosaic colors using D3.js","slug":"filling-images-with-mosaic-colors-using-d3js","tarkan":{"name":"Alen Thomas","role":"A tarkan","image":"anonymous.jpg","blurb":"He is still thiking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@alenthomas9"}},"coverImage":"filling-images-with-mosaic-colors-using-d3js/filling-images-with-mosaic-colors-using-d3js.webp"}},{"node":{"tag":"web","title":"How To Learn Coding Through Live Streaming","description":"How To Learn Coding Through Live Streaming","duration":"5 min read","thumbnail_alt":"How To Learn Coding Through Live Streaming","slug":"learn-coding-through-live-streaming","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"learn-youtube-video/rahul-blog-1.webp"}},{"node":{"tag":"web","title":"Remote pairing in mac (with low latency)","description":"Remote pairing in mac (with low latency)","duration":"3 min read","thumbnail_alt":"Remote pairing in mac (with low latency)","slug":"remote-pairing-mac-low-latency","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Debounce in Swift","description":"All about debounce: 4 ways to achieve debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Service Mesh in Kubernetes — Pictorially","description":"Service Mesh in Kubernetes — Pictorially","duration":"5 min read","thumbnail_alt":"Service Mesh in Kubernetes — Pictorially","slug":"service-mesh-kubernetes-guide","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"service-mesh-in-kubernetes/service-mesh-2.webp"}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","description":"Guide to safely run customer javascript code in your node.js environment using vm2.","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Deploying your Rails application using dokku","description":"Deploying your Rails application using dokku","duration":"5 min read","thumbnail_alt":"Deploying your Rails application using dokku","slug":"how-to-deploy-rails-application-with-dokku","tarkan":{"name":"Vinoth","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@avinoth"}},"coverImage":"how-to-deploy-rails-application-with-dokku/header.webp"}},{"node":{"tag":"web","title":"Searching with MongoDB and Elastic Search","description":"Searching with MongoDB and Elastic Search","duration":"4 min read","thumbnail_alt":"Searching with MongoDB and Elastic Search","slug":"searching-with-mongodb-and-elastic-search","tarkan":{"name":"Harman Sohanpal","role":"Developer","image":"harman.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"searching-with-mongodb-and-elastic-search/header.webp"}},{"node":{"tag":"web","title":"All You Need To Know About Comments in Ruby","description":"All You Need To Know About Comments in Ruby","duration":"5 min read","thumbnail_alt":"All You Need To Know About Comments in Ruby","slug":"all-you-need-to-know-about-comments-in-ruby","tarkan":{"name":"Sreedev Kodichath","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://sreedevk.medium.com/"}},"coverImage":"all-you-need-to-know-about-comments-in-ruby/header.webp"}},{"node":{"tag":"AI","title":"Person of Interest: How I built a Facial Recognition Machine Learning model.","description":"Person of Interest: How I built a Facial Recognition Machine Learning model.","duration":"5 min read","thumbnail_alt":"Person of Interest: How I built a Facial Recognition Machine Learning model.","slug":"building-a-facial-recognition-machine-learning-model","tarkan":{"name":"Rajiv Manivannan","role":"Developer","image":"rajiv.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"building-a-facial-recognition-machine-learning-model/1.webp"}},{"node":{"tag":"web","title":"Why we refuse fixed bid projects","description":"Why we refuse fixed bid projects","duration":"4 min read","thumbnail_alt":"Why we refuse fixed bid projects","slug":"why-we-refuse-fixed-bid-project","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-we-refuse-fixed-bid-project/why-we-refuse-fixed-big-projects.webp"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","description":"Understand kubernetes and its components with easily relatable pictorial representations.","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","description":"Look beyond react native and why flutter is exciting.","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"web","title":"PDF Comparison in Pure Ruby","description":"PDF Comparison in Pure Ruby","duration":"2 min read","thumbnail_alt":"PDF Comparison in Pure Ruby","slug":"pdf-comparison-pure-ruby","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"pdf-comparison-in-pure-ruby/pdf-comparison-in-pure-ruby.webp"}},{"node":{"tag":"careers","title":"How we hire engineers","description":"How Tarka Labs hires engineers. Published in the interest of transparency.","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","description":"Most developers spend a considerable amount of their time ssh'd into remote machines, however, few are aware of the power of ssh tunnels.","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","description":"The effectiveness of a positive mindset and the ability to self-assess.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}},{"node":{"tag":"web","title":"Event Delegation: Simple yet awesome!","description":"Event Delegation: Simple yet awesome!","duration":"2 min read","thumbnail_alt":"Event Delegation: Simple yet awesome!","slug":"event-delegation-simple-yet-awesome","tarkan":{"name":"Rahul Nitin Padalkar","role":"Developer","image":"rahul.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":"event-delegation/event-delegation.webp"}},{"node":{"tag":"devops","title":"Automating cluster creation with Terraform on DigitalOcean","description":"Automating cluster creation with Terraform on DigitalOcean","duration":"4 min read","thumbnail_alt":"Automating cluster creation with Terraform on DigitalOcean","slug":"automating-cluster-creation-with-terraform-on-digitalocean","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":""}},{"node":{"tag":"AI","title":"Part 2- Creating a neural network using tensorflow to colorize grayscale images.","description":"Part 2- Creating a neural network using tensorflow to colorize grayscale images.\n","duration":"4 min read","thumbnail_alt":"","slug":"colorize-grayscale-images-pt-2","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":""}},{"node":{"tag":"AI","title":"Part I — Creating a neural network using tensorflow to colorize grayscale images.","description":"Part I — Creating a neural network using tensorflow to colorize grayscale images","duration":"4 min read","thumbnail_alt":"","slug":"colorize-grayscale-images-pt-1","tarkan":{"name":"Deepak Prasanna","role":"A tarkan","image":"bitman.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@deepakprasanna"}},"coverImage":""}}]}},"context":{}}