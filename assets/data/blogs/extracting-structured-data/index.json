{"hash":"60b74391149c055e573d6fe1b193bd109fe517b8","data":{"blog":{"id":"3b84be7221470947a43bfc5b5752aafb","slug":"extracting-structured-data","content":"<p>Extracting structured data from PDFs is a common challenge across various industries. Whether you’re dealing with invoices, KYB documents, contracts, or reports, automating this process can significantly save time and reduce errors.\nIn this blog, I’ll guide you through extracting JSON data from a PDF file using Claude Sonnet, a Generative AI model, and Amazon Bedrock. We’ll break down the steps and provide sample code to run on your local machine, making it easy for you to replicate this solution.</p>\n<h1 id=\"problem-statement\"><a href=\"#problem-statement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Problem Statement</h1>\n<p>We have a sample invoice PDF that contains two pages, including details like the invoice number, total amount, and other key information.</p>\n<figure><img src=\"/blog/extracting-structured-data/invoice.png\" alt=\"Images from https://resources.docmosis.com/example-templates/generate-multi-page-invoice-from-template\"><figcaption>Images from https://resources.docmosis.com/example-templates/generate-multi-page-invoice-from-template</figcaption></figure>\n<p>We aim to extract specific fields from this PDF and output them in JSON format, the JSON will have following fields:</p>\n<ul>\n<li><code class=\"language-inline-text\">total_amount</code> (numeric)</li>\n<li><code class=\"language-inline-text\">company_name</code> (string)</li>\n<li><code class=\"language-inline-text\">currency_name</code> (string)</li>\n<li><code class=\"language-inline-text\">invoice_no</code> (string)</li>\n<li><code class=\"language-inline-text\">invoice_date</code> (string)</li>\n</ul>\n<h1 id=\"solution-overview\"><a href=\"#solution-overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Solution Overview</h1>\n<p>While many extraction tools are available to solve this, A Generative AI (Gen AI) model offers the most straightforward programmatic solution for this task. The way Gen AI models work is, it accepts an input images and along with the user Prompt(contains the info of what the user want) and it returns the response.</p>\n<p>Here’s a brief overview of the tools we’ll use:</p>\n<ul>\n<li><strong>Claude Sonnet</strong>: A powerful Generative AI model that can understand and process both text and images.</li>\n<li><strong>Amazon Bedrock</strong>: A managed service that provides a single API for calling foundational models from various providers, including Anthropic Claude Sonnet. (you can find the set of models managed by Amazon Bedrock <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>)</li>\n</ul>\n<p>We’ll use the Claude Sonnet 3.5 model to extract structured data from the PDF file. To interact with it, we’ll leverage Amazon Bedrock. We’ll employ Python libraries to make it all work.</p>\n<figure><img src=\"/blog/extracting-structured-data/extracting-data.webp\" alt=\"Extracting Data from PDF Workflow (Created using draw.io)\"><figcaption>Extracting Data from PDF Workflow (Created using draw.io)</figcaption></figure>\n<h1 id=\"claude-request-structure\"><a href=\"#claude-request-structure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Claude request structure</h1>\n<p>The following fields are required to trigger the Claude model:</p>\n<ul>\n<li><code class=\"language-inline-text\">anthropic_version</code>: The Bedrock-specific version for the Anthropic model. In our case, we’ll use bedrock-2023–05–31.</li>\n<li><code class=\"language-inline-text\">max_tokens</code>: The maximum number of output tokens to generate.</li>\n<li><code class=\"language-inline-text\">messages</code>: Each message will contain details about the model prompt, including its <code class=\"language-inline-text\">content</code> and <code class=\"language-inline-text\">role</code>.<br>\nThe <code class=\"language-inline-text\">content</code> field represents the input, which can be in the form of text or images. If the input is an image, it must be sent as a base64-encoded string. Base64 encoding is a straightforward method for sharing binary data over the internet. You can simply set the encoded string in the request body’s JSON field.\nThe <code class=\"language-inline-text\">role</code> field can be either “user” or “assistant.” A message with a “user” role contains the user’s query. A message with an “assistant” role represents the Claude model’s response.</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"># Sample Claude model request body\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"anthropic_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bedrock-2023-05-31\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"max_tokens\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"messages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"role\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"media_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"iVBORw...\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"What's in these images?\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To create the message request structure above, we first need to split the PDF pages into base64-encoded images.</p>\n<h1 id=\"amazon-bedrock-setup\"><a href=\"#amazon-bedrock-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Amazon bedrock setup</h1>\n<p>First, we’ll create a Bedrock runtime using the boto3 Python library to interact with the Claude Sonnet model.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_bedrock_runtime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">:</span>\n  client <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span><span class=\"token string\">'bedrock-runtime'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> client</code></pre></div>\n<ul>\n<li>get_bedrock_runtime simply creates the Bedrock runtime.</li>\n</ul>\n<p>Assuming your current AWS session has access to Amazon Bedrock, if necessary, pass the credentials explicitly to the boto3.client method like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">client <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span><span class=\"token string\">'bedrock-runtime'</span><span class=\"token punctuation\">,</span> aws_access_key_id<span class=\"token operator\">=</span><span class=\"token string\">'xxxxx'</span><span class=\"token punctuation\">,</span>\n                      aws_secret_access_key<span class=\"token operator\">=</span><span class=\"token string\">'xxxxx'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now let’s use the Bedrock runtime to invoke Bedrock models:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">MODEL_ID <span class=\"token operator\">=</span> <span class=\"token string\">\"anthropic.claude-3-5-sonnet-20240620-v1:0\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">run_multi_modal_prompt</span><span class=\"token punctuation\">(</span>req_body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      bedrock_runtime <span class=\"token operator\">=</span> get_bedrock_runtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      response <span class=\"token operator\">=</span> bedrock_runtime<span class=\"token punctuation\">.</span>invoke_model<span class=\"token punctuation\">(</span>\n          body<span class=\"token operator\">=</span>req_body<span class=\"token punctuation\">,</span> modelId<span class=\"token operator\">=</span>MODEL_ID<span class=\"token punctuation\">)</span>\n      response_body <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> response_body\n  <span class=\"token keyword\">except</span> ClientError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unable to create bedrock runtime'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">raise</span></code></pre></div>\n<ul>\n<li><code class=\"language-inline-text\">run_multi_modal_prompt</code> will invoke the model which we will mention in the request body. <code class=\"language-inline-text\">req_body</code> contains the user prompt details and other metadata required to call the Claude Sonnet model.</li>\n<li>First, it will get the Bedrock client using <code class=\"language-inline-text\">get_bedrock_runtime</code>, then it will invoke the model using the model ID <code class=\"language-inline-text\">anthropic.claude-3-5-sonnet-20240620-v1:0</code>, which is the latest version of Claude Sonnet.</li>\n<li>The <code class=\"language-inline-text\">invoke_model</code> method will return a response, and we're simply extracting the response body and converting it to a JSON object. So, we're returning the result as a dictionary.</li>\n</ul>\n<h1 id=\"file-reader\"><a href=\"#file-reader\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>File Reader</h1>\n<p>We can use the open function to read a file in binary mode. Here's a function to get the bytes of a file:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_file_bytes</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n      file_bytes <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> file_bytes</code></pre></div>\n<h1 id=\"split-pdf-into-images\"><a href=\"#split-pdf-into-images\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Split PDF into images</h1>\n<p>Claude model supports three formats: JPEG, PNG, and WEBP. We will use PNG because it generally has higher quality compared to the other two formats.\nWe will use the <code class=\"language-inline-text\">pdf2image</code> library to split the PDF file’s pages into PNG images. Then, we will convert these images into base64-encoded strings.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">split_pdf_pages</span><span class=\"token punctuation\">(</span>pdf_bytes<span class=\"token punctuation\">:</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">,</span> max_size<span class=\"token punctuation\">:</span><span class=\"token builtin\">tuple</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n  images <span class=\"token operator\">=</span> convert_from_bytes<span class=\"token punctuation\">(</span>pdf_file<span class=\"token operator\">=</span>pdf_bytes<span class=\"token punctuation\">,</span> fmt<span class=\"token operator\">=</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> img <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># resize if it exceeds the max size</span>\n      <span class=\"token keyword\">if</span> img<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> img<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n          img<span class=\"token punctuation\">.</span>thumbnail<span class=\"token punctuation\">(</span>max_size<span class=\"token punctuation\">,</span> Resampling<span class=\"token punctuation\">.</span>LANCZOS<span class=\"token punctuation\">)</span>\n  res <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>b64_encoded_str<span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">b64_encoded_str</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">:</span> Image<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n  byte_io <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>BytesIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  img<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>fp<span class=\"token operator\">=</span>byte_io<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'PNG'</span><span class=\"token punctuation\">,</span> quality<span class=\"token operator\">=</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> optimize<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># uncomment the below line, to visualize the image we are sending</span>\n  <span class=\"token comment\"># img.save(f'pdf2img_{str(time.time())}.png') &lt;-- saves the png file</span>\n  <span class=\"token keyword\">return</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>byte_io<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>The <code class=\"language-inline-text\">split_pdf_pages</code> function takes a PDF's byte content and an optional maximum size as input. It splits the PDF into PNG images using <code class=\"language-inline-text\">convert_from_bytes</code>, resizes images exceeding the maximum size to prevent excessive data, and converts each image to a base64-encoded string using <code class=\"language-inline-text\">map</code> and <code class=\"language-inline-text\">b64_encoded_str</code>. The function returns a list of base64-encoded strings representing the images</li>\n<li>The <code class=\"language-inline-text\">b64_encoded_str</code> function takes a Pillow Image object as input. It creates an in-memory byte stream, saves the image to the byte stream in PNG format with quality and optimization settings, and optionally saves the image to a file for visualization.</li>\n</ul>\n<h1 id=\"building-the-bedrock-request-body\"><a href=\"#building-the-bedrock-request-body\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Building the Bedrock Request Body</h1>\n<p>We will now use the previously defined methods to construct the Claude model request body.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">build_claude_req_body</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span>\n  file_bytes <span class=\"token operator\">=</span> get_file_bytes<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>\n  base64_encoded_pngs <span class=\"token operator\">=</span> split_pdf_pages<span class=\"token punctuation\">(</span>file_bytes<span class=\"token punctuation\">)</span>\n\n  messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"role\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"image\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">\"source\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token string\">\"media_type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> base64_encoded_png\n               <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> base64_encoded_png <span class=\"token keyword\">in</span> base64_encoded_pngs\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">:</span> USER_PROMPT\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n\n  req_body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"anthropic_version\"</span><span class=\"token punctuation\">:</span> BEDROCK_ANTHROPIC_VERSION<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">:</span> messages<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">:</span> SYSTEM_ROLE<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'max_tokens'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> req_body</code></pre></div>\n<ul>\n<li>The <code class=\"language-inline-text\">build_claude_req_body</code> function accepts the input PDF file path and returns the request body that will be used to trigger the Amazon Bedrock runtime. This function first reads the file bytes using <code class=\"language-inline-text\">get_file_bytes</code> and then converts the PDF bytes data to a list of base64-encoded strings using <code class=\"language-inline-text\">split_pdf_pages</code>. It then creates a list of messages, builds the request body, and finally returns it.</li>\n</ul>\n<p>Let’s examine the USER_PROMPT and SYSTEM_ROLE used in the request body:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">USER_PROMPT <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\n  Find the following fields and put it in JSON and don't return any thing else\n\n  total_amount: numeric,\n  company_name: str,\n  currency_name: str,\n  invoice_no: str,\n  invoice_date: str\n'''</span>\nSYSTEM_ROLE <span class=\"token operator\">=</span> <span class=\"token string\">'You are an Expense Bill Analyst'</span></code></pre></div>\n<ul>\n<li><code class=\"language-inline-text\">SYSTEM_ROLE</code> is primarily used to establish a domain-specific role. While it’s not mandatory, it can be helpful if you want your Model to become a specialized expert in a particular domain rather than a general assistant.</li>\n<li>In <code class=\"language-inline-text\">USER_PROMPT</code>, we are simply specifying the field names that we need to extract, and Claude Sonnet is intelligent enough to understand each field on its own. We are also explicitly stating that only the JSON output should be returned, excluding any additional text.\nWe have tested this with <strong>Sonnet 3.5</strong> version, and it has consistently produced only the JSON output. If the model were to return any fillers in the completion, such as \"Here is the JSON output\" or \"total amount is xxxxx and we found it in the second image,\" you could prefill the prompt with an assistant role as mentioned <a href=\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-structured-data-extraction-without-prefilling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</li>\n</ul>\n<h1 id=\"putting-it-all-together\"><a href=\"#putting-it-all-together\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Putting It All Together</h1>\n<p>Let’s combine everything into a single method that accepts the file path and returns only the JSON object as a result.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">extract_data</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      body <span class=\"token operator\">=</span> build_claude_req_body<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>\n      response <span class=\"token operator\">=</span> run_multi_modal_prompt<span class=\"token punctuation\">(</span>req_body<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Model response'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n      d <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> d\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'something went wrong'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>The <code class=\"language-inline-text\">extract_data</code> function accepts the file path, builds the Claude request body using <code class=\"language-inline-text\">build_claude_req_body</code>, triggers the <code class=\"language-inline-text\">run_multi_modal_prompt</code>, processes the response, and returns only the message content as a JSON object.</li>\n</ul>\n<p>An example of an Amazon Bedrock response looks like the following:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"msg_bdrk_01Rq6zsWD34B1m5vyvxuQERX\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"role\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"assistant\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"model\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"claude-3-5-sonnet-20240620\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;Claude model generated text...>\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"stop_reason\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"end_turn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"stop_sequence\"</span><span class=\"token punctuation\">:</span> null<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"input_tokens\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2219</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output_tokens\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can find the assistant-generated text in the <code class=\"language-inline-text\">response['content'][0]['text']</code> field. To understand more about the response fields, refer <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-anthropic-claude-messages.html#model-parameters-anthropic-claude-messages-request-response\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n<p>Here’s how you can use <code class=\"language-inline-text\">extract_data</code> function, just pass the input file path:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> extract_data<span class=\"token punctuation\">(</span>invoice_pdf_file_path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The printed result will look like this:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'total_amount'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5715.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'company_name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'META LEGAL &amp; FINANCE'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'currency_name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'USD'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'invoice_no'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'00000135'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'invoice_date'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'12 March 2024'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h1>\n<p>We’ve successfully demonstrated a method for extracting structured data from PDF files using the Claude Sonnet model and Amazon Bedrock. This approach can be adapted for various types of documents, making it a versatile tool for automation. If you’re dealing with similar challenges, give this approach a try and see how it can streamline your workflow. The complete setup can be found here</p>\n<p><em>That’s a wrap, Thanks for reading!</em></p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference</h2>\n<ul>\n<li><a href=\"https://docs.anthropic.com/en/docs/about-claude/models\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Claude models</a></li>\n<li><a href=\"https://docs.anthropic.com/en/docs/build-with-claude/vision#calculate-image-costs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vision models Pricing</a></li>\n<li><a href=\"https://github.com/anthropics/anthropic-cookbook/blob/main/multimodal/best_practices_for_vision.ipynb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Anthropic Cookbook</a></li>\n</ul>\n"},"blogs":{"edges":[{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","description":"Navigating change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"ai","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","description":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","description":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","description":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","description":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"ai","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","description":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","description":"Imagine you recently joined a new team, and after a couple of weeks, you were assigned a bug ticket. You look at the ticket and decide to see if this issue surfaced in the past and so do a search in the bug tracking tool.","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"consulting","title":"Building Serious Software","description":"Do you know what every software startup entrepreneur dreams of after they validate the market? Software that does not break with scale and is adaptable to change.","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","description":"As developers, it is necessary to understand how the code we write helps solve real-world problems. Often, it is easier to think about users while writing the application layer of code.","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"consulting","title":"What does a CTO do?","description":"There has been a lot of hand-wringing and discussions about what a CTO does on the interwebs. Does a CTO write code? Does a CTO's calendar look like it is on the maker's or the manager's schedule? Does a CTO sit in on interviews?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","description":"A manual for writers who work with cross-functional teams or roles.","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","description":"How Tarka Labs approaches hiring.","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"mobile","title":"Debounce in Swift","description":"All about debounce: 4 ways to achieve debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","description":"Guide to safely run customer javascript code in your node.js environment using vm2.","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","description":"Understand kubernetes and its components with easily relatable pictorial representations.","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","description":"Look beyond react native and why flutter is exciting.","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"careers","title":"How we hire engineers","description":"How Tarka Labs hires engineers. Published in the interest of transparency.","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","description":"Most developers spend a considerable amount of their time ssh'd into remote machines, however, few are aware of the power of ssh tunnels.","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","description":"The effectiveness of a positive mindset and the ability to self-assess.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}}]}},"context":{}}