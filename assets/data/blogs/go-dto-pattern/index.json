{"hash":"2c524a34610b4969d5c94d7216ed04c1e31bedf3","data":{"blog":{"id":"33ff2bb45a6a0231697e632bea026bb2","slug":"go-dto-pattern","content":"<p>I’ll start by confessing a certain bias — I love statically-typed languages.\nThe level of control and certainty they offer compared to dynamically-typed languages is something I always drool over.</p>\n<p>This admiration extends to the benefits that the DTO (Data Transfer Object) pattern brings to the table.\nThe DTO pattern is a design strategy used to transfer data between software application subsystems.\nIt ensures structure, which tickles my love for control in my apps.</p>\n<p>In this article, we’ll go through the implementation of DTO pattern in Go-based API.\nI’ll explain my DTO naming strategy as well as parsing and validation logic.\nFor simplicity, I’ll be writing the parsing and validation part for Go Fiber framework, but most of the code can be reused for vanilla Go or other frameworks like Gorilla.</p>\n<h1 id=\"dto-naming-strategy\"><a href=\"#dto-naming-strategy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DTO Naming strategy</h1>\n<p>I usually follow a set of general rules when naming DTOs for API. These rules work for almost all CRUD cases and a couple of other cases.\nIf they are not applicable, I try improvising on top of them.</p>\n<p>The entity/model that is going to be affected (Article, Authentication, Socket, etc) makes the first word in the name.\nThis can be omitted if the action in second point is self-defining (for example, authentication).\nThe type of action (Create, Update, Signup, etc) comes second in the name. They can be chained or omitted if being re-used or if not applicable.\nWhether it is for Request or Response forms the third part of the name, and it’ll be omitted if they are reused for both.\nThe DTOs are grouped into a file based on the first part of its name in singular form, which is the entity/model it affects.\nI’ll give a few examples which apply these rules:</p>\n<ul>\n<li><code class=\"language-inline-text\">dtos/article.go</code> may contain CRUD DTOs like ArticleListResponseDto, ArticleCreateRequestDto, ArticleCreateUpdateResponseDto, etc.</li>\n<li><code class=\"language-inline-text\">dtos/authentication.go</code> may contain more action based DTOs like SigninRequestDto, SignupRequestDto, etc.</li>\n<li><code class=\"language-inline-text\">dtos/socket.go</code> may contain generic DTOs like SocketRequestDto, SocketResponseDto, etc.</li>\n</ul>\n<h1 id=\"parsing-and-validation\"><a href=\"#parsing-and-validation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parsing and Validation</h1>\n<p>I use tags to assist in parsing to and from JSON.\nTags can also be used for defining rules for each field in the DTO and validating using the <a href=\"https://pkg.go.dev/github.com/go-playground/validator/v10\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">validator</a> package.\nSo, my DTOs might looks like:</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> SignupRequestDTO <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  Name     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"name\" validate:\"required\"`</span>\n  Username <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"username\" validate:\"required\"`</span>\n  Email    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"email\" validate:\"required,min=5\"`</span>\n  Password <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"password\" validate:\"required,min=8\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I personally do the parsing and validation in a single util method.\nThis is because failure in parsing would also indicate a validation failure on the request body structure.\nIf parsing works out well, we can validate other constraints we set for the DTO fields using the validate tags.\nWe loop through the validation errors and generate appropriate error messages for them.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ParseAndValidateRequest</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>fiber<span class=\"token punctuation\">.</span>Ctx<span class=\"token punctuation\">,</span> dto any<span class=\"token punctuation\">)</span> fiber<span class=\"token punctuation\">.</span>Map <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">BodyParser</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    errors <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Unable to parse request\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> fiber<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">{</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">:</span> errors<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    errors <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">.</span>ValidationErrors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      errors <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">,</span> <span class=\"token function\">generateErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> fiber<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">{</span><span class=\"token string\">\"errors\"</span><span class=\"token punctuation\">:</span> errors<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-inline-text\">generateErrorString</code> method used here is a small method to generate error strings for a given FieldError.\nIt checks the tag associated with the error and generates appropriate error message.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">generateErrorString</span><span class=\"token punctuation\">(</span>err validator<span class=\"token punctuation\">.</span>FieldError<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  field<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> param <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Tag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">switch</span> tag <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"min\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> field <span class=\"token operator\">+</span> <span class=\"token string\">\" should have minimum length of \"</span> <span class=\"token operator\">+</span> param\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"max\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> field <span class=\"token operator\">+</span> <span class=\"token string\">\" should have maximum length of \"</span> <span class=\"token operator\">+</span> param\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> field <span class=\"token operator\">+</span> <span class=\"token string\">\" is not valid\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As we add more tags for <a href=\"https://pkg.go.dev/github.com/go-playground/validator/v10#section-documentation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">validate</a>, we can extend this function to handle more cases.\nA full list of tags can be found in its documentation or you can read through is source on <a href=\"https://github.com/go-playground/validator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>.</p>\n<p>Now, when I have to parse a request body to DTO, I’ll pass the pointer to the DTO.\nThe function will parse and map to the fields in DTO passed by its pointer.\nIf there are any errors, we get a map with errors list inside it.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">requestDTO <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>dtos<span class=\"token punctuation\">.</span>SignupRequestDTO<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> errors <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">ParseAndValidateRequest</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> requestDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> errors <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Status</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>StatusUnprocessableEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that I think about it, this errors map returned from the function can also be a DTO 😉.</p>\n<h1 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h1>\n<p>Overall, this flow has been pretty convenient to use in my Go-based web projects.\nI write validation tags only in Request DTOs and only on fields that require them.\nBut, I’ve consistently written JSON tags for all fields regardless of whether they are required or not.</p>\n<p>Do let me know in the comments if you improvise on this.</p>\n"},"blogs":{"edges":[{"node":{"tag":"web","title":"Neovim as a java IDE","description":"Neovim as a java IDE","duration":"5 min read","thumbnail_alt":"Neovim as a java IDE","slug":"neovim-as-java-ide","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":""}},{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","description":"Navigating change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"ai","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","description":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","description":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","description":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","description":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"ai","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","description":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"mobile","title":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","description":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","duration":"3 min read","thumbnail_alt":"We tested out Kotlin Multiplatform Mobile (KMM). Here's our take.","slug":"kotlin-multiplatform-mobile","tarkan":{"name":"Ibrahim Hassan","role":"Mobile Developer","image":"ibrahim.png","blurb":"","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/mdibrahimhassan/","medium":"https://medium.com/@mdibrahimhassan"}},"coverImage":"kotlin-multiplatform-mobile/kotlin-multiplatform-mobile.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","description":"Imagine you recently joined a new team, and after a couple of weeks, you were assigned a bug ticket. You look at the ticket and decide to see if this issue surfaced in the past and so do a search in the bug tracking tool.","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"consulting","title":"Building Serious Software","description":"Do you know what every software startup entrepreneur dreams of after they validate the market? Software that does not break with scale and is adaptable to change.","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","description":"As developers, it is necessary to understand how the code we write helps solve real-world problems. Often, it is easier to think about users while writing the application layer of code.","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"consulting","title":"What does a CTO do?","description":"There has been a lot of hand-wringing and discussions about what a CTO does on the interwebs. Does a CTO write code? Does a CTO's calendar look like it is on the maker's or the manager's schedule? Does a CTO sit in on interviews?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","description":"A manual for writers who work with cross-functional teams or roles.","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"devops","title":"How to reduce your Node.js docker image size by 70%","description":"How to reduce your Node.js docker image size by 70%","duration":"4 min read","thumbnail_alt":"How to reduce your Node.js docker image size by 70%","slug":"reduce-nodejs-docker-image-size","tarkan":{"name":"Madhava Reddy SV","role":"DevOps","image":"madhava.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":""}},"coverImage":""}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","description":"How Tarka Labs approaches hiring.","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"mobile","title":"Debounce in Swift","description":"All about debounce: 4 ways to achieve debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","description":"Guide to safely run customer javascript code in your node.js environment using vm2.","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","description":"Understand kubernetes and its components with easily relatable pictorial representations.","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","description":"Look beyond react native and why flutter is exciting.","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"careers","title":"How we hire engineers","description":"How Tarka Labs hires engineers. Published in the interest of transparency.","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","description":"Most developers spend a considerable amount of their time ssh'd into remote machines, however, few are aware of the power of ssh tunnels.","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","description":"The effectiveness of a positive mindset and the ability to self-assess.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}}]}},"context":{}}