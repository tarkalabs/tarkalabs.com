{"hash":"60b74391149c055e573d6fe1b193bd109fe517b8","data":{"blog":{"id":"09fa642491ed2a323c76e34e15c53db9","slug":"generic-callbacks-rust","content":"<p>In a recent project, we developed an ingestion pipeline in Rust.\nWe wanted to execute asynchronous tasks in response to messages received from SQS, as a subscriber.\nOur goal was to leverage Rust generics to allow the subscriber to take ownership of the payload schema and the pipeline implementation details.\nThis approach enables the separation of the SQS subscription logic from the subscriber’s responsibilities, promoting of cleaner separation of concerns.\nIt also facilitates independent testing of both components, ensuring they can be assessed in isolation.</p>\n<p>Here’s what we came up with :</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">aws_sdk_sqs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">serde<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">DeserializeOwned</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">JsonError</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">thiserror<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug, Error)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">QueueError</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Error receiving message from SQS queue: {0}\"</span>)]</span>\n  <span class=\"token class-name\">ReceiveError</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[from]</span> <span class=\"token class-name\">ReceiveMessageError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Error deleting message from SQS queue: {0}\"</span>)]</span>\n  <span class=\"token class-name\">DeleteError</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[from]</span> <span class=\"token class-name\">DeleteMessageError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Error sending message to SQS queue: {0}\"</span>)]</span>\n  <span class=\"token class-name\">SendError</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[from]</span> <span class=\"token class-name\">SendMessageError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Error serializing/deserializing JSON: {0}\"</span>)]</span>\n  <span class=\"token class-name\">JsonSerializationError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Callback failed: {0}\"</span>)]</span>\n  <span class=\"token class-name\">CallbackError</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[source]</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Sync</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">subscribe</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fut</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">QueueError</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n  <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">DeserializeOwned</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Fut</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Sync</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Fut</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Future</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Sync</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> client\n      <span class=\"token punctuation\">.</span><span class=\"token function\">receive_messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">queue_url</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> message <span class=\"token keyword\">in</span> response<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received SQS Message: {:?}, from Queue: {}\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> cloned_message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> receipt_handle <span class=\"token operator\">=</span> cloned_message<span class=\"token punctuation\">.</span>receipt_handle<span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>body <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">match</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_str</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">match</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callback completed successfully for SQS queue: {}\"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">error!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callback failed for SQS Queue: {}, error: {:?}\"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueueError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">CallbackError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n\n                  <span class=\"token keyword\">match</span> client\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">delete_message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">queue_url</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">receipt_handle</span><span class=\"token punctuation\">(</span>receipt_handle<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span>\n                    <span class=\"token punctuation\">{</span>\n                      <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message deleted from SQS queue: {}\"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">error!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to delete message from queue: {}, error: {:?}\"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueueError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">DeleteError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">error!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error decoding message from SQS queue: {}, error: {:?}\"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueueError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">JsonSerializationError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token namespace\">log<span class=\"token punctuation\">::</span></span><span class=\"token macro property\">error!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error receive messages from SQS queue: {}, error: {:?}\"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueueError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ReceiveError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-inline-text\">subscribe</code> method is generic on 3 things :</p>\n<ul>\n<li><code class=\"language-inline-text\">T</code> is the payload type that the callback function receives as an argument. <code class=\"language-inline-text\">T</code> should de-serialize from a json string, so should implement <code class=\"language-inline-text\">DeserializeOwned</code></li>\n<li><code class=\"language-inline-text\">F</code> is the callback function, it receives the type <code class=\"language-inline-text\">T</code> as an argument and returns a type that implements <code class=\"language-inline-text\">Fut + Send + Sync</code> This is so that it is asynchronous and can be shared across threads.</li>\n<li><code class=\"language-inline-text\">Fut</code> implements a <code class=\"language-inline-text\">Future</code> with <code class=\"language-inline-text\">Output</code> being a <code class=\"language-inline-text\">Result&lt;(), Box&lt;dyn std::error::Error + Send + Sync>>> + Send</code></li>\n</ul>\n<p>A similar approach for the publisher:</p>\n<div class=\"gridsome-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">serde<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">aws_sdk_sqs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug, Serialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Message</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Serialize</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">pub</span> body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">publish</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Message</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">QueueError</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n  <span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n  client\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send_message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">queue_url</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">message_body</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-inline-text\">publish</code> function is generic on the type <code class=\"language-inline-text\">T</code>.\nIt must implement the <code class=\"language-inline-text\">Serialize</code> trait.\nIt is passed as the <code class=\"language-inline-text\">body</code> field of the <code class=\"language-inline-text\">Message</code> struct argument.\nThis message body is then serialized to a string when calling the SQS <code class=\"language-inline-text\">send_message</code> API.</p>\n"},"blogs":{"edges":[{"node":{"tag":"consulting","title":"Navigating Change: The BA's Role in Managing Agile Transformations","description":"Navigating change: The BA's Role in Managing Agile Transformations","duration":"3 min read","thumbnail_alt":"Navigating change: The BA's Role in Managing Agile Transformations","slug":"navigating-change","tarkan":{"name":"Sparsh Gupta","role":"Product Owner","image":"sparsh.png","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@sparsh28"}},"coverImage":"navigating-change/navigating-change.webp"}},{"node":{"tag":"ai","title":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","description":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","duration":"7 min read","thumbnail_alt":"Extracting Structured Data from PDFs with Claude Sonnet and Amazon Bedrock","slug":"extracting-structured-data","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":""}},{"node":{"tag":"web","title":"Leveraging DTO pattern in Go-based web apps","description":"Leveraging DTO pattern in Go-based web apps","duration":"4 min read","thumbnail_alt":"Leveraging DTO pattern in Go-based web apps","slug":"go-dto-pattern","tarkan":{"name":"Shamil Siddique","role":"Developer","image":"shamil.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@shamilsdq"}},"coverImage":"go-dto-pattern/go-dto-pattern.webp"}},{"node":{"tag":"web","title":"Handling message duplication in Kafka","description":"Handling message duplication in Kafka","duration":"5 min read","thumbnail_alt":"Handling message duplication in Kafka","slug":"kafka-message-duplication","tarkan":{"name":"Vignesh Ravichandran","role":"Developer","image":"vignesh.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vignesh-ravichandran"}},"coverImage":"kafka-message-duplication/kafka-message-duplication.webp"}},{"node":{"tag":"web","title":"Generic Callbacks in Rust","description":"Generic Callbacks in Rust","duration":"3 min read","thumbnail_alt":"Generic Callbacks in Rust","slug":"generic-callbacks-rust","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"generic-callbacks-rust/generic-callbacks-rust.webp"}},{"node":{"tag":"ai","title":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","description":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","duration":"8 min read","thumbnail_alt":"Implementing Serverless Batch Transcription with AWS Step Functions and Azure AI Services","slug":"batch-transcription","tarkan":{"name":"Kesavan","role":"Developer","image":"k7.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@itzk7"}},"coverImage":"batch-transcription/batch-transcription.webp"}},{"node":{"tag":"consulting","title":"Documentation: Yes, We Should!","description":"Imagine you recently joined a new team, and after a couple of weeks, you were assigned a bug ticket. You look at the ticket and decide to see if this issue surfaced in the past and so do a search in the bug tracking tool.","duration":"4 min read","thumbnail_alt":"A 3D image of a file folder with purple, yellow and green color rectangles for pages","slug":"documentation-yes-we-should","tarkan":{"name":"Jahangir Anwari","role":"Developer","image":"jahangir.jpeg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@janwari"}},"coverImage":"documentation-yes-we-should/documentation-yes-we-should.png"}},{"node":{"tag":"consulting","title":"Building Serious Software","description":"Do you know what every software startup entrepreneur dreams of after they validate the market? Software that does not break with scale and is adaptable to change.","duration":"4 min read","thumbnail_alt":"A cartoon of loosely held blocks which are held by stick figures from collapsing","slug":"building-serious-software","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":"building-serious-software/banner.png"}},{"node":{"tag":"consulting","title":"Wait! Don't write code yet","description":"As developers, it is necessary to understand how the code we write helps solve real-world problems. Often, it is easier to think about users while writing the application layer of code.","duration":"3 min read","thumbnail_alt":"A isometric image of a 3D maze","slug":"wait-dont-write-code-yet","tarkan":{"name":"Vidhya Desikan","role":"Developer","image":"vidhya.png","blurb":"","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@vdviddin"}},"coverImage":"wait-dont-write-code-yet/wait-dont-write-code-yet.png"}},{"node":{"tag":"consulting","title":"What does a CTO do?","description":"There has been a lot of hand-wringing and discussions about what a CTO does on the interwebs. Does a CTO write code? Does a CTO's calendar look like it is on the maker's or the manager's schedule? Does a CTO sit in on interviews?","duration":"6 min read","thumbnail_alt":"A isometric image of a balancing scale with code on one side and detective lens on the other side","slug":"what-does-a-cto-do","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"what-does-a-cto-do/cover.png"}},{"node":{"tag":"careers","title":"A writer's guide to working in a tech consultancy","description":"A manual for writers who work with cross-functional teams or roles.","duration":"4 min read","thumbnail_alt":"A circular red shape surrounded by cubes","slug":"a-writers-guide-to-working-in-a-tech-consultancy","tarkan":{"name":"Puneetha Jagannathan","role":"Brand Communications Specialist","image":"puneetha.jpg","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://puneetha-j.medium.com/"}},"coverImage":"a-writers-guide-to-working-in-a-tech-consultancy/a-writers-guide-to-working-in-a-tech-consultancy.png"}},{"node":{"tag":"careers","title":"Our Guide To Hiring Great People","description":"How Tarka Labs approaches hiring.","duration":"5 min read","thumbnail_alt":"Colors in geometric shapes with hand-drawn sketches on them","slug":"our-guide-to-hiring-great-people","tarkan":{"name":"Jenifa Newlin","role":"People Champion","image":"jenifa.jpg","blurb":"She is still thinking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@jenifa_85990"}},"coverImage":"our-guide-to-hiring-great-people/our-guide-to-hiring-great-people.png"}},{"node":{"tag":"mobile","title":"Debounce in Swift","description":"All about debounce: 4 ways to achieve debounce in Swift","duration":"5 min read","thumbnail_alt":"A representation of a function called 'debounce' which is accepting, as input, a green circle labelled '3' and outputting an identical-looking green circle with no label","slug":"debounce-in-swift","tarkan":{"name":"Pavan Kumar C","role":"iOS Developer","image":"pavan.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://pavankumarchalla.medium.com/"}},"coverImage":""}},{"node":{"tag":"web","title":"Javascript Sandbox for your Node Project","description":"Guide to safely run customer javascript code in your node.js environment using vm2.","duration":"3 min read","thumbnail_alt":"Sandbox with a pail and shovel","slug":"javascript-sandbox-for-your-node-project","tarkan":{"name":"Utkarsh Mehta","role":"Developer","image":"bitman.png","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://life-of-utkarsh.medium.com/"}},"coverImage":"javascript-sandbox-for-your-node-project/javascript-sandbox-for-your-node-project.png"}},{"node":{"tag":"web","title":"Know Kubernetes - Pictorially","description":"Understand kubernetes and its components with easily relatable pictorial representations.","duration":"7 min read","thumbnail_alt":"Black and white sketch of a square room labelled 'MASTER' with the following items: disk pack, chest of drawers with a wifi signal-emitting device on top, and two tables","slug":"know-kubernetes-pictorially","tarkan":{"name":"Sudhakar Rayavaram","role":"Developer","image":"sudhakar.jpg","blurb":"Programming is overrated. I mean, there is more to solving a real world problem than writing code","socials":{"twitter":"","linkedin":"https://www.linkedin.com/in/sudocker/","medium":"https://medium.com/@suDocker"}},"coverImage":""}},{"node":{"tag":"mobile","title":"Why flutter","description":"Look beyond react native and why flutter is exciting.","duration":"5 min read","thumbnail_alt":"A hummingbird in flight","slug":"why-flutter","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"why-flutter/why-flutter.png"}},{"node":{"tag":"careers","title":"How we hire engineers","description":"How Tarka Labs hires engineers. Published in the interest of transparency.","duration":"3 min read","thumbnail_alt":"A dark room with two empty chairs facing each other across a table","slug":"how-we-hire-engineers","tarkan":{"name":"Vagmi Mudumbai","role":"Developer","image":"vagmi.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://vagmi.medium.com/"}},"coverImage":"how-we-hire-engineers/how-we-hire-engineers.png"}},{"node":{"tag":"web","title":"Power of SSH Tunneling","description":"Most developers spend a considerable amount of their time ssh'd into remote machines, however, few are aware of the power of ssh tunnels.","duration":"4 min read","thumbnail_alt":"Silhouette of a man standing inside a glowing blue tunnel with a glowing white circle in front of him","slug":"power-of-ssh-tunneling","tarkan":{"name":"Dhruva Sagar","role":"Developer","image":"dhruva.jpg","blurb":"He is still thinking what to write about him","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@dhruvasagar"}},"coverImage":"power-of-ssh-tunneling/power-of-ssh-tunneling.png"}},{"node":{"tag":"careers","title":"All in one's mind.","description":"The effectiveness of a positive mindset and the ability to self-assess.","duration":"4 min read","thumbnail_alt":"A growing plant is layered over the artwork of a human brain","slug":"all-in-ones-mind","tarkan":{"name":"Ramya Raghavan","role":"A tarkan","image":"bitman.png","blurb":"She is still thiking what to write about her","socials":{"twitter":"","linkedin":"","medium":"https://medium.com/@ramyaraghavan"}},"coverImage":"all-in-ones-mind/onion.webp"}}]}},"context":{}}